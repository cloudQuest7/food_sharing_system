<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>ShareBites - My Requests</title>
    <script src="https://cdn.tailwindcss.com"></script>
    <link rel="preconnect" href="https://fonts.gstatic.com/" crossorigin="" />
    <link rel="stylesheet" href="https://fonts.googleapis.com/css2?display=swap&family=Epilogue:wght@400;500;700;900&family=Noto+Sans:wght@400;500;700;900" />
    <style>
        body {
            font-family: Epilogue, "Noto Sans", sans-serif;
            background-color: #fcfaf8;
        }
    </style>
</head>
<body>
    <div class="flex">
        <!-- Sidebar -->
        <div class="w-64 h-screen bg-white border-r border-[#e8dbce] fixed flex flex-col justify-between">
            <div class="p-6">
                <div class="flex items-center gap-4 text-[#1c140d] mb-8">
                    <div class="size-4">
                        <svg viewBox="0 0 48 48" fill="none" xmlns="http://www.w3.org/2000/svg">
                            <path d="M8.57829 8.57829C5.52816 11.6284 3.451 15.5145 2.60947 19.7452C1.76794 23.9758 2.19984 28.361 3.85056 32.3462C5.50128 36.3314 8.29667 39.7376 11.8832 42.134C15.4698 44.5305 19.6865 45.8096 24 45.8096C28.3135 45.8096 32.5302 44.5305 36.1168 42.134C39.7033 39.7375 42.4987 36.3314 44.1494 32.3462C45.8002 28.361 46.2321 23.9758 45.3905 19.7452C44.549 15.5145 42.4718 11.6284 39.4217 8.57829L24 24L8.57829 8.57829Z" fill="currentColor"></path>
                        </svg>
                    </div>
                    <h2 class="text-[#1c140d] text-lg font-bold leading-tight tracking-[-0.015em]">ShareBites</h2>
                </div>
                <nav class="space-y-4">
                    <a href="/recipient/dashboard" class="block px-4 py-2 text-[#1c140d] hover:bg-[#fcfaf8] rounded-lg font-medium">Dashboard</a>
                    <a href="/recipient/browse" class="block px-4 py-2 text-[#1c140d] hover:bg-[#fcfaf8] rounded-lg font-medium">Browse Food</a>
                    <a href="/recipient/my-requests" class="block px-4 py-2 bg-[#f2800d] text-white rounded-lg font-medium">My Requests</a>
                    <a href="/recipient/saved" class="block px-4 py-2 text-[#1c140d] hover:bg-[#fcfaf8] rounded-lg font-medium">Saved Items</a>
                    <a href="/recipient/profile" class="block px-4 py-2 text-[#1c140d] hover:bg-[#fcfaf8] rounded-lg font-medium">Profile</a>
                </nav>
            </div>
            
            <!-- Profile Section -->
            <div class="p-6 border-t border-[#e8dbce]">
                <div class="flex items-center gap-3">
                    <img src="https://ui-avatars.com/api/?name=<%= user.name %>&background=f2800d&color=fff" 
                         alt="<%= user.name %>'s profile" 
                         class="w-10 h-10 rounded-full border-2 border-[#f2800d]"/>
                    <div>
                        <p class="text-[#1c140d] font-bold"><%= user.name %></p>
                        <p class="text-[#9c7349] text-sm">Food Recipient</p>
                    </div>
                </div>
            </div>
        </div>

        <!-- Main Content -->
        <div class="ml-64 flex-1 p-8">
            <!-- Header -->
            <div class="mb-8">
                <div class="flex justify-between items-center mb-4">
                    <h1 class="text-[#1c140d] text-4xl font-black leading-tight tracking-[-0.033em]">My Requests</h1>
                    <a href="/recipient/dashboard" class="text-[#f2800d] hover:underline flex items-center gap-1">
                        <span>‚Üê</span> Back to Dashboard
                    </a>
                </div>
                <p class="text-[#9c7349] text-lg">Track and manage your food requests</p>
            </div>

            <!-- Success Message (conditionally shown) -->
            <% if (typeof requestSubmitted !== 'undefined' && requestSubmitted) { %>
            <div class="bg-green-100 border border-green-400 text-green-700 px-4 py-3 rounded-lg mb-8 flex justify-between items-center">
                <div class="flex items-center">
                    <svg class="h-5 w-5 mr-2" fill="currentColor" viewBox="0 0 20 20">
                        <path fill-rule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zm3.707-9.293a1 1 0 00-1.414-1.414L9 10.586 7.707 9.293a1 1 0 00-1.414 1.414l2 2a1 1 0 001.414 0l4-4z" clip-rule="evenodd"></path>
                    </svg>
                    <p>Your request was submitted successfully! The donor will review it shortly.</p>
                </div>
                <button class="text-green-700 hover:text-green-900 focus:outline-none" onclick="this.parentElement.style.display='none'">
                    <svg class="h-4 w-4" fill="currentColor" viewBox="0 0 20 20">
                        <path fill-rule="evenodd" d="M4.293 4.293a1 1 0 011.414 0L10 8.586l4.293-4.293a1 1 0 111.414 1.414L11.414 10l4.293 4.293a1 1 0 01-1.414 1.414L10 11.414l-4.293 4.293a1 1 0 01-1.414-1.414L8.586 10 4.293 5.707a1 1 0 010-1.414z" clip-rule="evenodd"></path>
                    </svg>
                </button>
            </div>
            <% } %>

            <!-- Requests Tabs -->
            <div class="border-b border-[#e8dbce] mb-6">
                <div class="flex gap-8">
                    <button id="active-tab" class="text-[#f2800d] border-b-2 border-[#f2800d] pb-3 font-bold">
                        Active (<span id="active-count">0</span>)
                    </button>
                    <button id="past-tab" class="text-[#9c7349] pb-3 font-bold hover:text-[#f2800d]">
                        Past Requests (<span id="past-count">0</span>)
                    </button>
                </div>
            </div>

            <!-- Requests Container -->
            <div id="requests-container" class="space-y-6 mb-8">
                <!-- Request cards will be loaded dynamically here -->
                
                <!-- Loading placeholder -->
                <div id="loading-placeholder" class="animate-pulse space-y-6">
                    <div class="bg-white p-6 rounded-xl border border-[#e8dbce]">
                        <div class="h-6 bg-gray-200 rounded w-1/4 mb-4"></div>
                        <div class="h-4 bg-gray-200 rounded w-1/2 mb-2"></div>
                        <div class="h-4 bg-gray-200 rounded w-3/4 mb-6"></div>
                        <div class="h-10 bg-gray-200 rounded w-full mb-2"></div>
                    </div>
                    <div class="bg-white p-6 rounded-xl border border-[#e8dbce]">
                        <div class="h-6 bg-gray-200 rounded w-1/4 mb-4"></div>
                        <div class="h-4 bg-gray-200 rounded w-1/2 mb-2"></div>
                        <div class="h-4 bg-gray-200 rounded w-3/4 mb-6"></div>
                        <div class="h-10 bg-gray-200 rounded w-full mb-2"></div>
                    </div>
                </div>
            </div>

            <!-- No Requests Placeholder -->
            <div id="no-requests" class="hidden bg-white p-8 rounded-xl border border-[#e8dbce] text-center">
                <div class="w-20 h-20 bg-[#fcfaf8] rounded-full flex items-center justify-center mx-auto mb-4">
                    <span class="text-3xl">üìã</span>
                </div>
                <h3 class="font-bold text-[#1c140d] text-xl mb-2">No active requests</h3>
                <p class="text-[#9c7349] mb-6 max-w-md mx-auto">You don't have any active food requests. Browse available food to make a request.</p>
                <a href="/recipient/browse" class="px-6 py-3 bg-[#f2800d] text-white rounded-full font-bold hover:bg-[#e67600] transition-colors inline-block">
                    Browse Available Food
                </a>
            </div>
        </div>
    </div>

    <script>
        let activeRequests = [];
        let pastRequests = [];
        let currentTab = 'active';
        
        document.addEventListener('DOMContentLoaded', function() {
            // Load requests
            loadRequests();
            
            // Set up tab switching
            document.getElementById('active-tab').addEventListener('click', () => switchTab('active'));
            document.getElementById('past-tab').addEventListener('click', () => switchTab('past'));
            
            // Set up mobile menu toggle if needed
            const menuToggle = document.getElementById('menuToggle');
            if (menuToggle) {
                menuToggle.addEventListener('click', toggleMenu);
            }
        });
        
        function toggleMenu() {
            const sidebar = document.querySelector('aside');
            sidebar.classList.toggle('-translate-x-full');
        }
        
        function loadRequests() {
            const userId = '<%= user._id %>';
            const storageKey = `userRequests_${userId}`;
            const requests = JSON.parse(localStorage.getItem(storageKey) || '[]');
            
            // Separate active and past requests
            activeRequests = requests.filter(req => ['pending', 'accepted'].includes(req.status));
            pastRequests = requests.filter(req => ['completed', 'cancelled', 'rejected'].includes(req.status));
            
            // Update counts
            document.getElementById('active-count').textContent = activeRequests.length;
            document.getElementById('past-count').textContent = pastRequests.length;
            
            // Remove loading placeholder
            document.getElementById('loading-placeholder').remove();
            
            // Display requests based on current tab
            displayRequests();
        }
        
        function displayRequests() {
            const container = document.getElementById('requests-container');
            const noRequests = document.getElementById('no-requests');
            
            // Clear container
            container.innerHTML = '';
            
            // Get requests to display based on current tab
            const requests = currentTab === 'active' ? activeRequests : pastRequests;
            
            // Show no requests message if needed
            if (requests.length === 0) {
                noRequests.classList.remove('hidden');
                return;
            } else {
                noRequests.classList.add('hidden');
            }
            
            // Sort requests by timestamp (newest first)
            requests.sort((a, b) => new Date(b.timestamp) - new Date(a.timestamp));
            
            // Add request cards
            requests.forEach(request => {
                const card = createRequestCard(request);
                container.appendChild(card);
            });
            
            // If a new request was just submitted, highlight it
            const urlParams = new URLSearchParams(window.location.search);
            if (urlParams.get('submitted') === 'true' && currentTab === 'active' && requests.length > 0) {
                // Add highlight class to the first (newest) card
                const firstCard = container.querySelector('.request-card');
                if (firstCard) {
                    firstCard.classList.add('border-[#f2800d]');
                    
                    // Remove the highlight after a few seconds
                    setTimeout(() => {
                        firstCard.classList.remove('border-[#f2800d]');
                        firstCard.classList.add('border-[#e8dbce]');
                    }, 5000);
                }
            }
        }
        
        function createRequestCard(request) {
            const card = document.createElement('div');
            card.className = 'request-card bg-white p-6 rounded-xl border border-[#e8dbce] hover:border-[#f2800d] transition-colors';
            card.id = `request-${request.id}`;
            
            // Format timestamp
            const timestamp = new Date(request.timestamp);
            const formattedTimestamp = timestamp.toLocaleDateString(undefined, {
                year: 'numeric',
                month: 'short',
                day: 'numeric'
            });
            
            // Determine time ago text
            const timeAgo = getTimeAgo(timestamp);
            
            // Determine status badge style
            let statusBadge = '';
            if (request.status === 'pending') {
                statusBadge = '<span class="bg-yellow-100 text-yellow-800 px-3 py-1 rounded-full text-sm font-bold mb-2">Pending</span>';
            } else if (request.status === 'accepted') {
                statusBadge = '<span class="bg-blue-100 text-blue-800 px-3 py-1 rounded-full text-sm font-bold mb-2">Accepted</span>';
            } else if (request.status === 'completed') {
                statusBadge = '<span class="bg-green-100 text-green-800 px-3 py-1 rounded-full text-sm font-bold mb-2">Completed</span>';
            } else if (request.status === 'rejected') {
                statusBadge = '<span class="bg-red-100 text-red-800 px-3 py-1 rounded-full text-sm font-bold mb-2">Rejected</span>';
            } else if (request.status === 'cancelled') {
                statusBadge = '<span class="bg-gray-100 text-gray-800 px-3 py-1 rounded-full text-sm font-bold mb-2">Cancelled</span>';
            }
            
            // Determine emoji for food type
            const emoji = getFoodEmoji(request.foodId);
            
            // Build status message based on request status
            let statusMessage = '';
            let actionButtons = '';
            
            if (request.status === 'pending') {
                statusMessage = 'The donor has not responded yet. They will contact you soon.';
                actionButtons = `
                    <button onclick="cancelRequest('${request.id}')" class="px-4 py-2 border border-[#e8dbce] text-[#1c140d] rounded-full font-bold hover:border-[#f2800d] transition-colors">
                        Cancel
                    </button>
                    <button class="px-4 py-2 bg-[#f2800d] text-white rounded-full font-bold hover:bg-[#e67600] transition-colors">
                        Contact
                    </button>
                `;
            } else if (request.status === 'accepted') {
                statusMessage = `Your request has been accepted. Please pick up the food as scheduled (${request.pickupTime}).`;
                actionButtons = `
                    <button onclick="cancelRequest('${request.id}')" class="px-4 py-2 border border-[#e8dbce] text-[#1c140d] rounded-full font-bold hover:border-[#f2800d] transition-colors">
                        Cancel
                    </button>
                    <button onclick="markAsCompleted('${request.id}')" class="px-4 py-2 bg-[#f2800d] text-white rounded-full font-bold hover:bg-[#e67600] transition-colors">
                        Mark as Received
                    </button>
                `;
            } else if (request.status === 'completed') {
                statusMessage = 'This request has been completed. Thank you for using our service!';
                actionButtons = `
                    <button onclick="removeRequest('${request.id}')" class="px-4 py-2 text-white bg-red-500 rounded-full font-bold hover:bg-red-600 transition-colors">
                        Remove
                    </button>
                `;
            } else if (request.status === 'rejected' || request.status === 'cancelled') {
                statusMessage = 'This request is no longer active.';
                actionButtons = `
                    <button onclick="removeRequest('${request.id}')" class="px-4 py-2 text-white bg-red-500 rounded-full font-bold hover:bg-red-600 transition-colors">
                        Remove
                    </button>
                `;
            }
            
            card.innerHTML = `
                <div class="flex justify-between items-start">
                    <div class="flex gap-4">
                        <div class="w-20 h-20 bg-[#fcfaf8] rounded-lg flex items-center justify-center shrink-0">
                            <span class="text-3xl">${emoji}</span>
                        </div>
                        <div>
                            <h3 class="font-bold text-[#1c140d] text-lg">${request.foodId.split('_')[0]}</h3>
                            <p class="text-[#9c7349] mb-2">Requested from ${request.donorName} (${request.location || 'Location unavailable'})</p>
                            <div class="flex gap-4 text-sm text-[#9c7349]">
                                <p>üì¶ Quantity: ${request.quantity}</p>
                                <p>‚è∞ Pickup: ${request.pickupTime}</p>
                            </div>
                        </div>
                    </div>
                    <div class="flex flex-col items-end">
                        ${statusBadge}
                        <span class="text-[#9c7349] text-sm">Requested ${timeAgo}</span>
                    </div>
                </div>
                <div class="mt-4 pt-4 border-t border-[#e8dbce] flex justify-between items-center">
                    <div class="text-[#9c7349]">
                        <p>${statusMessage}</p>
                    </div>
                    <div class="flex gap-2">
                        ${actionButtons}
                    </div>
                </div>
            `;
            
            return card;
        }
        
        function switchTab(tab) {
            currentTab = tab;
            
            // Update tab styling
            if (tab === 'active') {
                document.getElementById('active-tab').className = 'text-[#f2800d] border-b-2 border-[#f2800d] pb-3 font-bold';
                document.getElementById('past-tab').className = 'text-[#9c7349] pb-3 font-bold hover:text-[#f2800d]';
            } else {
                document.getElementById('active-tab').className = 'text-[#9c7349] pb-3 font-bold hover:text-[#f2800d]';
                document.getElementById('past-tab').className = 'text-[#f2800d] border-b-2 border-[#f2800d] pb-3 font-bold';
            }
            
            // Display appropriate requests
            displayRequests();
        }
        
        function cancelRequest(requestId) {
            if (confirm('Are you sure you want to cancel this request?')) {
                updateRequestStatus(requestId, 'cancelled');
                
                // Refresh UI
                const requestCard = document.getElementById(`request-${requestId}`);
                if (requestCard) {
                    requestCard.remove();
                }
                
                // Move from active to past
                loadRequests();
                displayRequests();
            }
        }
        
        function markAsCompleted(requestId) {
            if (confirm('Mark this request as completed? This means you have received the food.')) {
                updateRequestStatus(requestId, 'completed');
                
                // Refresh UI
                const requestCard = document.getElementById(`request-${requestId}`);
                if (requestCard) {
                    requestCard.remove();
                }
                
                // Move from active to past
                loadRequests();
                displayRequests();
            }
        }
        
        function removeRequest(requestId) {
            if (confirm('Remove this request from your history?')) {
                // Get user requests
                const userId = '<%= user._id %>';
                const storageKey = `userRequests_${userId}`;
                let requests = JSON.parse(localStorage.getItem(storageKey) || '[]');
                
                // Remove request
                requests = requests.filter(req => req.id !== requestId);
                
                // Save back to storage
                localStorage.setItem(storageKey, JSON.stringify(requests));
                
                // Refresh UI
                const requestCard = document.getElementById(`request-${requestId}`);
                if (requestCard) {
                    requestCard.remove();
                }
                
                // Reload requests
                loadRequests();
                displayRequests();
            }
        }
        
        function updateRequestStatus(requestId, newStatus) {
            // Update in user's requests
            const userId = '<%= user._id %>';
            const storageKey = `userRequests_${userId}`;
            let requests = JSON.parse(localStorage.getItem(storageKey) || '[]');
            
            const requestIndex = requests.findIndex(req => req.id === requestId);
            if (requestIndex !== -1) {
                requests[requestIndex].status = newStatus;
                localStorage.setItem(storageKey, JSON.stringify(requests));
            }
            
            // Also update in the common pool
            const allRequestsKey = 'allFoodRequests';
            let allRequests = JSON.parse(localStorage.getItem(allRequestsKey) || '[]');
            
            const allRequestIndex = allRequests.findIndex(req => req.id === requestId);
            if (allRequestIndex !== -1) {
                allRequests[allRequestIndex].status = newStatus;
                localStorage.setItem(allRequestsKey, JSON.stringify(allRequests));
            }
        }
        
        function getTimeAgo(date) {
            const seconds = Math.floor((new Date() - date) / 1000);
            
            let interval = seconds / 31536000;
            if (interval > 1) {
                return Math.floor(interval) + ' years ago';
            }
            
            interval = seconds / 2592000;
            if (interval > 1) {
                return Math.floor(interval) + ' months ago';
            }
            
            interval = seconds / 86400;
            if (interval > 1) {
                return Math.floor(interval) + ' days ago';
            }
            
            interval = seconds / 3600;
            if (interval > 1) {
                return Math.floor(interval) + ' hours ago';
            }
            
            interval = seconds / 60;
            if (interval > 1) {
                return Math.floor(interval) + ' minutes ago';
            }
            
            return Math.floor(seconds) + ' seconds ago';
        }
        
        function getFoodEmoji(foodId) {
            // Extract food type from ID if possible
            const foodType = foodId.toLowerCase();
            
            if (foodType.includes('vegetable') || foodType.includes('veg')) {
                return 'ü•ï';
            } else if (foodType.includes('fruit')) {
                return 'üçé';
            } else if (foodType.includes('bread') || foodType.includes('bakery')) {
                return 'üçû';
            } else if (foodType.includes('dairy') || foodType.includes('milk')) {
                return 'ü•õ';
            } else if (foodType.includes('meal') || foodType.includes('prepared')) {
                return 'üç≤';
            } else if (foodType.includes('canned') || foodType.includes('can')) {
                return 'ü•´';
            } else {
                return 'üç±';
            }
        }
    </script>
</body>
</html> 