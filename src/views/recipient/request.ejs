<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>ShareBites - Request Food</title>
    <script src="https://cdn.tailwindcss.com"></script>
    <link rel="preconnect" href="https://fonts.gstatic.com/" crossorigin="" />
    <link rel="stylesheet" href="https://fonts.googleapis.com/css2?display=swap&family=Epilogue:wght@400;500;700;900&family=Noto+Sans:wght@400;500;700;900" />
    <style>
        body {
            font-family: Epilogue, "Noto Sans", sans-serif;
            background-color: #fcfaf8;
        }
    </style>
</head>
<body>
    <div class="flex">
        <!-- Sidebar -->
        <div class="w-64 h-screen bg-white border-r border-[#e8dbce] fixed flex flex-col justify-between">
            <div class="p-6">
                <div class="flex items-center gap-4 text-[#1c140d] mb-8">
                    <div class="size-4">
                        <svg viewBox="0 0 48 48" fill="none" xmlns="http://www.w3.org/2000/svg">
                            <path d="M8.57829 8.57829C5.52816 11.6284 3.451 15.5145 2.60947 19.7452C1.76794 23.9758 2.19984 28.361 3.85056 32.3462C5.50128 36.3314 8.29667 39.7376 11.8832 42.134C15.4698 44.5305 19.6865 45.8096 24 45.8096C28.3135 45.8096 32.5302 44.5305 36.1168 42.134C39.7033 39.7375 42.4987 36.3314 44.1494 32.3462C45.8002 28.361 46.2321 23.9758 45.3905 19.7452C44.549 15.5145 42.4718 11.6284 39.4217 8.57829L24 24L8.57829 8.57829Z" fill="currentColor"></path>
                        </svg>
                    </div>
                    <h2 class="text-[#1c140d] text-lg font-bold leading-tight tracking-[-0.015em]">ShareBites</h2>
                </div>
                <nav class="space-y-4">
                    <a href="/recipient/dashboard" class="block px-4 py-2 text-[#1c140d] hover:bg-[#fcfaf8] rounded-lg font-medium">Dashboard</a>
                    <a href="/recipient/browse" class="block px-4 py-2 text-[#1c140d] hover:bg-[#fcfaf8] rounded-lg font-medium">Browse Food</a>
                    <a href="/recipient/my-requests" class="block px-4 py-2 text-[#1c140d] hover:bg-[#fcfaf8] rounded-lg font-medium">My Requests</a>
                    <a href="/recipient/saved" class="block px-4 py-2 text-[#1c140d] hover:bg-[#fcfaf8] rounded-lg font-medium">Saved Items</a>
                    <a href="/recipient/profile" class="block px-4 py-2 text-[#1c140d] hover:bg-[#fcfaf8] rounded-lg font-medium">Profile</a>
                </nav>
            </div>
            
            <!-- Profile Section -->
            <div class="p-6 border-t border-[#e8dbce]">
                <div class="flex items-center gap-3">
                    <img src="https://ui-avatars.com/api/?name=<%= user.name %>&background=f2800d&color=fff" 
                         alt="<%= user.name %>'s profile" 
                         class="w-10 h-10 rounded-full border-2 border-[#f2800d]"/>
                    <div>
                        <p class="text-[#1c140d] font-bold"><%= user.name %></p>
                        <p class="text-[#9c7349] text-sm">Food Recipient</p>
                    </div>
                </div>
            </div>
        </div>

        <!-- Main Content -->
        <div class="ml-64 flex-1 p-8">
            <!-- Header -->
            <div class="mb-8">
                <div class="flex justify-between items-center mb-4">
                    <h1 class="text-[#1c140d] text-4xl font-black leading-tight tracking-[-0.033em]">Request Food</h1>
                    <a href="javascript:history.back()" class="text-[#f2800d] hover:underline flex items-center gap-1">
                        <span>‚Üê</span> Back
                    </a>
                </div>
                <p class="text-[#9c7349] text-lg">Complete your request for this food item</p>
            </div>

            <!-- Food Item Details -->
            <div class="bg-white p-6 rounded-xl border border-[#e8dbce] mb-6">
                <div class="flex flex-col md:flex-row md:items-center gap-6">
                    <div class="w-full md:w-1/3 bg-[#fcfaf8] aspect-square rounded-lg flex items-center justify-center">
                        <span class="text-6xl">üç≤</span>
                    </div>
                    <div class="w-full md:w-2/3">
                        <div id="food-details-loading" class="animate-pulse">
                            <div class="h-8 bg-gray-200 rounded w-3/4 mb-2"></div>
                            <div class="h-6 bg-gray-200 rounded w-1/2 mb-4"></div>
                            <div class="h-4 bg-gray-200 rounded w-full mb-2"></div>
                            <div class="h-4 bg-gray-200 rounded w-full mb-2"></div>
                            <div class="h-4 bg-gray-200 rounded w-3/4 mb-2"></div>
                        </div>
                        <div id="food-details-content" class="hidden">
                            <!-- Donation details will be loaded dynamically -->
                        </div>
                    </div>
                </div>
            </div>

            <!-- Request Form -->
            <div class="bg-white p-6 rounded-xl border border-[#e8dbce]">
                <h2 class="text-xl font-bold text-[#1c140d] mb-4">Request Details</h2>
                <form id="requestForm" class="space-y-6">
                    <input type="hidden" id="foodId" name="foodId" value="<%= foodId %>">
                    <input type="hidden" id="donorId" name="donorId">
                    <input type="hidden" id="donorName" name="donorName">
                    
                    <div>
                        <label for="quantity" class="block text-[#1c140d] font-medium mb-2">How much do you need?</label>
                        <select id="quantity" name="quantity" class="w-full p-3 border border-[#e8dbce] rounded-lg focus:border-[#f2800d] focus:outline-none">
                            <option value="all">All available</option>
                            <option value="half">About half</option>
                            <option value="some">Just a small portion</option>
                        </select>
                    </div>
                    
                    <div>
                        <label for="pickupTime" class="block text-[#1c140d] font-medium mb-2">When can you pick it up?</label>
                        <select id="pickupTime" name="pickupTime" class="w-full p-3 border border-[#e8dbce] rounded-lg focus:border-[#f2800d] focus:outline-none">
                            <option value="asap">As soon as possible</option>
                            <option value="today">Later today</option>
                            <option value="tomorrow">Tomorrow</option>
                        </select>
                    </div>
                    
                    <div>
                        <label for="notes" class="block text-[#1c140d] font-medium mb-2">Additional notes (optional)</label>
                        <textarea id="notes" name="notes" rows="3" placeholder="Anything else the donor should know?" 
                                  class="w-full p-3 border border-[#e8dbce] rounded-lg focus:border-[#f2800d] focus:outline-none"></textarea>
                    </div>
                    
                    <div class="pt-4">
                        <label class="flex items-start gap-2">
                            <input type="checkbox" name="agree" required class="mt-1">
                            <span class="text-[#9c7349]">I understand that this food may have a short shelf life and I am responsible for picking it up at the agreed time. I will follow all safety guidelines for handling food.</span>
                        </label>
                    </div>
                    
                    <div class="flex gap-4 pt-2">
                        <a href="javascript:history.back()" class="px-6 py-3 border border-[#e8dbce] text-[#1c140d] rounded-full font-bold hover:border-[#f2800d] transition-colors">
                            Cancel
                        </a>
                        <button type="submit" class="px-6 py-3 bg-[#f2800d] text-white rounded-full font-bold hover:bg-[#e67600] transition-colors">
                            Submit Request
                        </button>
                    </div>
                </form>
            </div>
        </div>
    </div>

    <script>
        document.addEventListener('DOMContentLoaded', function() {
            const foodId = document.getElementById('foodId').value;
            loadFoodDetails(foodId);
            
            // Set up form submission
            document.getElementById('requestForm').addEventListener('submit', submitFoodRequest);
        });
        
        // Load food details from localStorage
        function loadFoodDetails(foodId) {
            const keys = Object.keys(localStorage);
            const donationKeys = keys.filter(key => key.startsWith('userDonations_'));
            
            let foodItem = null;
            let donorDetails = null;
            
            // Search through all donor storage for the specific food item
            for (const key of donationKeys) {
                try {
                    const donations = JSON.parse(localStorage.getItem(key) || '[]');
                    const foundItem = donations.find(d => d.id === foodId);
                    
                    if (foundItem) {
                        foodItem = foundItem;
                        donorDetails = {
                            id: foodItem.userId || key.replace('userDonations_', ''),
                            name: foodItem.userName || 'Anonymous Donor'
                        };
                        break;
                    }
                } catch (error) {
                    console.error('Error loading food details:', error);
                }
            }
            
            // Hide loading, show content
            const loadingElement = document.getElementById('food-details-loading');
            const contentElement = document.getElementById('food-details-content');
            
            if (foodItem) {
                // Calculate time remaining until expiry
                const expiryDate = new Date(foodItem.expiryDate);
                const now = new Date();
                const hoursLeft = Math.round((expiryDate - now) / (1000 * 60 * 60));
                
                // Format the time remaining text
                let timeText = '';
                if (hoursLeft < 1) {
                    timeText = 'Less than 1 hour left';
                } else if (hoursLeft === 1) {
                    timeText = '1 hour left';
                } else if (hoursLeft < 24) {
                    timeText = `${hoursLeft} hours left`;
                } else {
                    const daysLeft = Math.floor(hoursLeft / 24);
                    timeText = `${daysLeft} day${daysLeft > 1 ? 's' : ''} left`;
                }
                
                // Set hidden donor fields
                document.getElementById('donorId').value = donorDetails.id;
                document.getElementById('donorName').value = donorDetails.name;
                
                // Format dates
                const expiryDateFormatted = expiryDate.toLocaleDateString(undefined, {
                    year: 'numeric',
                    month: 'long',
                    day: 'numeric'
                });
                
                const postedDate = new Date(foodItem.timestamp);
                const postedDateFormatted = postedDate.toLocaleDateString(undefined, {
                    year: 'numeric',
                    month: 'short',
                    day: 'numeric'
                });
                
                // Build HTML content
                contentElement.innerHTML = `
                    <h2 class="text-2xl font-bold text-[#1c140d] mb-2">${foodItem.foodName}</h2>
                    <div class="mb-4">
                        <span class="bg-green-100 text-green-800 px-2 py-1 rounded-full text-sm">Available</span>
                        <span class="text-[#9c7349] ml-2">Posted by ${donorDetails.name}</span>
                    </div>
                    <p class="text-[#1c140d] mb-4">Quantity: ${foodItem.quantity}</p>
                    <div class="flex flex-wrap gap-4 text-[#9c7349] mb-6">
                        <p>‚è∞ ${timeText}</p>
                        <p>üìÖ Best before: ${expiryDateFormatted}</p>
                        <p>üìç ${foodItem.location}</p>
                        <p>üìù Posted: ${postedDateFormatted}</p>
                    </div>
                `;
                
                // Show content, hide loading
                loadingElement.classList.add('hidden');
                contentElement.classList.remove('hidden');
            } else {
                // If food item not found, show error
                contentElement.innerHTML = `
                    <h2 class="text-2xl font-bold text-red-600 mb-2">Food Item Not Found</h2>
                    <p class="text-[#9c7349] mb-4">This food item may no longer be available.</p>
                    <a href="/recipient/browse" class="text-[#f2800d] hover:underline">Browse other available food</a>
                `;
                loadingElement.classList.add('hidden');
                contentElement.classList.remove('hidden');
            }
        }
        
        // Handle form submission
        function submitFoodRequest(event) {
            event.preventDefault();
            
            const formData = {
                foodId: document.getElementById('foodId').value,
                donorId: document.getElementById('donorId').value,
                donorName: document.getElementById('donorName').value,
                quantity: document.getElementById('quantity').value,
                pickupTime: document.getElementById('pickupTime').value,
                notes: document.getElementById('notes').value,
                recipientId: '<%= user._id %>',
                recipientName: '<%= user.name %>',
                status: 'pending',
                timestamp: new Date().toISOString(),
                id: 'request_' + Date.now()
            };
            
            // Save request to localStorage
            saveRequest(formData);
            
            // Redirect to my-requests page
            window.location.href = '/recipient/my-requests?submitted=true';
        }
        
        // Save request to localStorage
        function saveRequest(requestData) {
            // Create a storage key for the recipient
            const recipientStorageKey = `userRequests_${requestData.recipientId}`;
            
            // Get existing requests or create empty array
            let userRequests = JSON.parse(localStorage.getItem(recipientStorageKey) || '[]');
            
            // Add new request
            userRequests.push(requestData);
            
            // Save back to localStorage
            localStorage.setItem(recipientStorageKey, JSON.stringify(userRequests));
            
            // Also save to a common request pool for donors to access
            const allRequestsKey = 'allFoodRequests';
            let allRequests = JSON.parse(localStorage.getItem(allRequestsKey) || '[]');
            allRequests.push(requestData);
            localStorage.setItem(allRequestsKey, JSON.stringify(allRequests));
            
            console.log('Request saved:', requestData);
        }
        //chatbot integrated
        (function(){if(!window.chatbase||window.chatbase("getState")!=="initialized"){window.chatbase=(...arguments)=>{if(!window.chatbase.q){window.chatbase.q=[]}window.chatbase.q.push(arguments)};window.chatbase=new Proxy(window.chatbase,{get(target,prop){if(prop==="q"){return target.q}return(...args)=>target(prop,...args)}})}const onLoad=function(){const script=document.createElement("script");script.src="https://www.chatbase.co/embed.min.js";script.id="XdbxzB02-VrgllGOSsnGa";script.domain="www.chatbase.co";document.body.appendChild(script)};if(document.readyState==="complete"){onLoad()}else{window.addEventListener("load",onLoad)}})();
    </script>
</body>
</html> 