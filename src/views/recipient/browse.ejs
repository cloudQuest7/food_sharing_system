<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>ShareBites - Browse Food</title>
    <script src="https://cdn.tailwindcss.com"></script>
    <link rel="preconnect" href="https://fonts.gstatic.com/" crossorigin="" />
    <link rel="stylesheet" href="https://fonts.googleapis.com/css2?display=swap&family=Epilogue:wght@400;500;700;900&family=Noto+Sans:wght@400;500;700;900" />
    <style>
        body {
            font-family: Epilogue, "Noto Sans", sans-serif;
            background-color: #fcfaf8;
        }
    </style>
</head>
<body>
    <div class="flex">
        <!-- Sidebar -->
        <div class="w-64 h-screen bg-white border-r border-[#e8dbce] fixed flex flex-col justify-between">
            <div class="p-6">
                <div class="flex items-center gap-4 text-[#1c140d] mb-8">
                    <div class="size-4">
                        <svg viewBox="0 0 48 48" fill="none" xmlns="http://www.w3.org/2000/svg">
                            <path d="M8.57829 8.57829C5.52816 11.6284 3.451 15.5145 2.60947 19.7452C1.76794 23.9758 2.19984 28.361 3.85056 32.3462C5.50128 36.3314 8.29667 39.7376 11.8832 42.134C15.4698 44.5305 19.6865 45.8096 24 45.8096C28.3135 45.8096 32.5302 44.5305 36.1168 42.134C39.7033 39.7375 42.4987 36.3314 44.1494 32.3462C45.8002 28.361 46.2321 23.9758 45.3905 19.7452C44.549 15.5145 42.4718 11.6284 39.4217 8.57829L24 24L8.57829 8.57829Z" fill="currentColor"></path>
                        </svg>
                    </div>
                    <h2 class="text-[#1c140d] text-lg font-bold leading-tight tracking-[-0.015em]">ShareBites</h2>
                </div>
                <nav class="space-y-4">
                    <a href="/recipient/dashboard" class="block px-4 py-2 text-[#1c140d] hover:bg-[#fcfaf8] rounded-lg font-medium">Dashboard</a>
                    <a href="/recipient/browse" class="block px-4 py-2 text-[#1c140d] hover:bg-[#fcfaf8] rounded-lg font-medium">Browse Food</a>
                    <a href="/recipient/my-requests" class="block px-4 py-2 bg-[#f2800d] text-white rounded-lg font-medium">My Requests</a>
                    <a href="/recipient/saved" class="block px-4 py-2 text-[#1c140d] hover:bg-[#fcfaf8] rounded-lg font-medium">Saved Items</a>
                    <a href="/recipient/profile" class="block px-4 py-2 text-[#1c140d] hover:bg-[#fcfaf8] rounded-lg font-medium">Profile</a>
                </nav>
            </div>
            
            <!-- Profile Section -->
            <div class="p-6 border-t border-[#e8dbce]">
                <div class="flex items-center gap-3">
                    <img src="https://ui-avatars.com/api/?name=<%= user.name %>&background=f2800d&color=fff" 
                         alt="<%= user.name %>'s profile" 
                         class="w-10 h-10 rounded-full border-2 border-[#f2800d]"/>
                    <div>
                        <p class="text-[#1c140d] font-bold"><%= user.name %></p>
                        <p class="text-[#9c7349] text-sm">Food Recipient</p>
                    </div>
                </div>
            </div>
        </div>

        <!-- Main Content -->
        <div class="ml-64 flex-1 p-8">
            <!-- Header Section -->
            <div class="mb-8">
                <div class="flex justify-between items-center">
                    <h1 class="text-[#1c140d] text-4xl font-black leading-tight tracking-[-0.033em] mb-4">Browse Available Food</h1>
                    <button id="refreshButton" onclick="loadAvailableDonations(true)" class="px-4 py-2 border border-[#e8dbce] rounded-lg text-[#1c140d] hover:border-[#f2800d] flex items-center gap-2">
                        <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 4v5h.582m15.356 2A8.001 8.001 0 004.582 9m0 0H9m11 11v-5h-.581m0 0a8.003 8.003 0 01-15.357-2m15.357 2H15" />
                        </svg>
                        Refresh
                    </button>
                </div>
                <p class="text-[#9c7349] text-lg">Find and request food items from your local community</p>
            </div>

            <!-- Filters Section -->
            <div class="bg-white p-6 rounded-xl border border-[#e8dbce] mb-8">
                <div class="grid grid-cols-1 md:grid-cols-12 gap-4">
                    <!-- Search Input -->
                    <div class="md:col-span-4">
                        <label for="search-input" class="block text-sm font-medium text-[#9c7349] mb-1">Search</label>
                        <input type="text" 
                               id="search-input"
                               placeholder="Search food items..." 
                               class="w-full px-4 py-3 rounded-xl border border-[#e8dbce] focus:border-[#f2800d] outline-none"/>
                    </div>
                    
                    <!-- Food Type Filter -->
                    <div class="md:col-span-3">
                        <label for="food-type" class="block text-sm font-medium text-[#9c7349] mb-1">Food Type</label>
                        <select id="food-type" class="w-full px-4 py-3 rounded-xl border border-[#e8dbce] focus:border-[#f2800d] outline-none">
                            <option value="">All Types</option>
                            <option value="fresh">Fresh Produce</option>
                            <option value="bakery">Bakery Items</option>
                            <option value="cooked">Cooked Meals</option>
                            <option value="dairy">Dairy Products</option>
                            <option value="canned">Canned/Packaged</option>
                            <option value="beverages">Beverages</option>
                            <option value="other">Other</option>
                        </select>
                    </div>
                    
                    <!-- Expiry Filter -->
                    <div class="md:col-span-3">
                        <label for="expiry-filter" class="block text-sm font-medium text-[#9c7349] mb-1">Expiry Timeframe</label>
                        <select id="expiry-filter" class="w-full px-4 py-3 rounded-xl border border-[#e8dbce] focus:border-[#f2800d] outline-none">
                            <option value="">Any Timeframe</option>
                            <option value="urgent">Urgent (< 3 hours)</option>
                            <option value="today">Today (< 12 hours)</option>
                            <option value="tomorrow">Within 24 hours</option>
                            <option value="week">This week</option>
                        </select>
                    </div>
                    
                    <!-- Filter Button -->
                    <div class="md:col-span-2 flex items-end">
                        <button id="apply-filters" class="w-full px-4 py-3 bg-[#f2800d] text-white rounded-xl font-medium hover:bg-[#e67600] transition-colors">
                            Apply Filters
                        </button>
                    </div>
                </div>
                
                <!-- Active Filters -->
                <div id="active-filters" class="mt-4 flex flex-wrap gap-2 pt-4 border-t border-[#e8dbce] hidden">
                    <!-- Active filters will be displayed here -->
                </div>
            </div>

            <!-- Food Grid -->
            <div id="food-listings" class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
                <!-- Food cards will be loaded dynamically here -->
                
                <!-- Loading placeholder -->
                <div class="animate-pulse bg-white p-6 rounded-xl border border-[#e8dbce]">
                    <div class="h-6 bg-gray-200 rounded w-3/4 mb-2"></div>
                    <div class="h-4 bg-gray-200 rounded w-1/2 mb-4"></div>
                    <div class="h-4 bg-gray-200 rounded w-full mb-4"></div>
                    <div class="h-4 bg-gray-200 rounded w-3/4 mb-6"></div>
                    <div class="h-10 bg-gray-200 rounded w-full"></div>
                </div>
                <div class="animate-pulse bg-white p-6 rounded-xl border border-[#e8dbce]">
                    <div class="h-6 bg-gray-200 rounded w-3/4 mb-2"></div>
                    <div class="h-4 bg-gray-200 rounded w-1/2 mb-4"></div>
                    <div class="h-4 bg-gray-200 rounded w-full mb-4"></div>
                    <div class="h-4 bg-gray-200 rounded w-3/4 mb-6"></div>
                    <div class="h-10 bg-gray-200 rounded w-full"></div>
                </div>
                <div class="animate-pulse bg-white p-6 rounded-xl border border-[#e8dbce]">
                    <div class="h-6 bg-gray-200 rounded w-3/4 mb-2"></div>
                    <div class="h-4 bg-gray-200 rounded w-1/2 mb-4"></div>
                    <div class="h-4 bg-gray-200 rounded w-full mb-4"></div>
                    <div class="h-4 bg-gray-200 rounded w-3/4 mb-6"></div>
                    <div class="h-10 bg-gray-200 rounded w-full"></div>
                </div>
            </div>
            
            <!-- Empty state message -->
            <div id="no-food-message" class="hidden bg-white p-8 rounded-xl border border-[#e8dbce] text-center">
                <div class="w-20 h-20 bg-[#fcfaf8] rounded-full flex items-center justify-center mx-auto mb-4">
                    <span class="text-3xl">üçΩÔ∏è</span>
                </div>
                <h3 class="font-bold text-[#1c140d] text-xl mb-2">No Food Available</h3>
                <p class="text-[#9c7349] mb-6 max-w-md mx-auto">There are no food donations available right now. Please check back later or adjust your search filters.</p>
            </div>

            <!-- Pagination -->
            <div class="mt-8 flex justify-between items-center">
                <div class="flex gap-2">
                    <button class="px-4 py-2 border border-[#e8dbce] rounded-lg text-[#1c140d] hover:border-[#f2800d]">Previous</button>
                    <button class="px-4 py-2 bg-[#f2800d] text-white rounded-lg">1</button>
                    <button class="px-4 py-2 border border-[#e8dbce] rounded-lg text-[#1c140d] hover:border-[#f2800d]">2</button>
                    <button class="px-4 py-2 border border-[#e8dbce] rounded-lg text-[#1c140d] hover:border-[#f2800d]">3</button>
                    <button class="px-4 py-2 border border-[#e8dbce] rounded-lg text-[#1c140d] hover:border-[#f2800d]">Next</button>
                </div>
                <button onclick="createTestDonation()" class="px-4 py-2 bg-gray-200 text-gray-800 rounded-lg hover:bg-gray-300 text-sm">Create Test Donation</button>
            </div>
        </div>
    </div>

    <script>
        // Global variables to store all donations and current filters
        let allAvailableDonations = [];
        let activeFilters = {
            search: '',
            foodType: '',
            expiry: ''
        };
        
        // Get all donor food posts from localStorage to display them
        document.addEventListener('DOMContentLoaded', function() {
            // Clear loading placeholders and load food items immediately
            document.getElementById('food-listings').innerHTML = '';
            
            // Force a refresh with debug enabled on initial load
            loadAvailableDonations(true);
            
            // Set up a refresh interval to periodically check for new donations
            setInterval(() => {
                loadAvailableDonations(false);
            }, 10000); // Check every 10 seconds
            
            // Add event listeners for menu toggle if on mobile
            const menuToggle = document.getElementById('menuToggle');
            if (menuToggle) {
                menuToggle.addEventListener('click', toggleMenu);
            }
            
            // Add filter event listeners
            setupFilterEventListeners();
        });
        
        function setupFilterEventListeners() {
            // Search input
            const searchInput = document.getElementById('search-input');
            if (searchInput) {
                searchInput.addEventListener('input', function() {
                    activeFilters.search = this.value.trim().toLowerCase();
                });
            }
            
            // Food type filter
            const foodTypeSelect = document.getElementById('food-type');
            if (foodTypeSelect) {
                foodTypeSelect.addEventListener('change', function() {
                    activeFilters.foodType = this.value;
                });
            }
            
            // Expiry filter
            const expirySelect = document.getElementById('expiry-filter');
            if (expirySelect) {
                expirySelect.addEventListener('change', function() {
                    activeFilters.expiry = this.value;
                });
            }
            
            // Apply filters button
            const applyFiltersBtn = document.getElementById('apply-filters');
            if (applyFiltersBtn) {
                applyFiltersBtn.addEventListener('click', function() {
                    applyFilters();
                });
            }
        }
        
        function toggleMenu() {
            const sidebar = document.getElementById('sidebar');
            sidebar.classList.toggle('-translate-x-full');
        }
        
        function loadAvailableDonations(debug = false) {
            const donationsContainer = document.getElementById('food-listings');
            const noFoodMessage = document.getElementById('no-food-message');
            
            // Use the universal food donations key - this is the primary source now
            const universalDonationKey = 'allFoodDonations';
            
            // For debug purposes, check all localStorage
            if (debug) {
                const keys = Object.keys(localStorage);
                console.log('All localStorage keys:', keys);
                
                // Debug the universal storage content specifically
                const universalRawData = localStorage.getItem(universalDonationKey);
                console.log(`Universal donations raw data:`, universalRawData);
                
                if (universalRawData) {
                    try {
                        const parsedData = JSON.parse(universalRawData);
                        console.log(`Parsed universal donations (${parsedData.length} items):`, parsedData);
                    } catch (e) {
                        console.error('Error parsing universal donations:', e);
                    }
                }
            }
            
            // Get donations from the universal key 
            allAvailableDonations = [];
            try {
                const universalRawData = localStorage.getItem(universalDonationKey);
                if (universalRawData) {
                    const universalDonations = JSON.parse(universalRawData || '[]');
                    if (Array.isArray(universalDonations)) {
                        // Filter for valid donations
                        const validUniversalDonations = universalDonations.filter(donation => {
                            if (!donation) return false;
                            
                            const hasRequiredFields = donation.foodName && donation.expiryDate;
                            if (!hasRequiredFields) return false;
                            
                            const status = donation.status || 'pending';
                            // Only show donations that are pending (not requested, completed, etc.)
                            const isValid = status === 'pending';
                            
                            let expiryDate;
                            try {
                                expiryDate = new Date(donation.expiryDate);
                            } catch (e) {
                                return false;
                            }
                            
                            const isNotExpired = expiryDate >= new Date();
                            return isValid && isNotExpired;
                        });
                        
                        allAvailableDonations = [...validUniversalDonations];
                        
                        if (debug) {
                            console.log(`Found ${validUniversalDonations.length} valid donations in universal storage`);
                        }
                    }
                }
            } catch (error) {
                console.error(`Error processing universal donations:`, error);
            }
            
            // For backward compatibility, also check older donor-specific keys
            // This block is only needed temporarily until all donors use the universal storage
            if (allAvailableDonations.length === 0) {
                try {
                    // Get older-style donation keys
                    const keys = Object.keys(localStorage);
                    const donationKeys = keys.filter(key => key.startsWith('userDonations_'));
                    
                    if (debug) console.log('Checking legacy donor keys as fallback:', donationKeys);
                    
                    // Process each donor's donations
                    donationKeys.forEach(key => {
                        try {
                            const rawData = localStorage.getItem(key);
                            if (!rawData) return;
                            
                            const donations = JSON.parse(rawData);
                            if (!Array.isArray(donations)) return;
                            
                            // Filter for valid donations
                            const validDonations = donations.filter(donation => {
                                if (!donation) return false;
                                
                                const hasRequiredFields = donation.foodName && donation.expiryDate;
                                if (!hasRequiredFields) return false;
                                
                                const status = donation.status || 'pending';
                                // Only show donations that are pending (not requested, completed, etc.)
                                const isValid = status === 'pending';
                                
                                let expiryDate;
                                try {
                                    expiryDate = new Date(donation.expiryDate);
                                } catch (e) {
                                    return false;
                                }
                                
                                const isNotExpired = expiryDate >= new Date();
                                return isValid && isNotExpired;
                            });
                            
                            allAvailableDonations = [...allAvailableDonations, ...validDonations];
                            
                            if (debug && validDonations.length > 0) {
                                console.log(`Found ${validDonations.length} valid donations in legacy key ${key}`);
                            }
                        } catch (error) {
                            console.error(`Error processing donations from key ${key}:`, error);
                        }
                    });
                } catch (error) {
                    console.error(`Error processing legacy donations:`, error);
                }
            }
            
            // Now check if any of these donations have been requested and filter them out
            // Get all food requests from localStorage
            const allRequestsKey = 'allFoodRequests';
            try {
                const requestsData = localStorage.getItem(allRequestsKey);
                if (requestsData) {
                    const allRequests = JSON.parse(requestsData);
                    if (Array.isArray(allRequests) && allRequests.length > 0) {
                        // Create a set of donation IDs that have been requested
                        const requestedDonationIds = new Set();
                        allRequests.forEach(request => {
                            // Extract donation ID from the request's foodId if it contains an underscore
                            if (request.foodId && request.foodId.includes('_')) {
                                const donationId = request.foodId.split('_')[1];
                                requestedDonationIds.add(donationId);
                            }
                        });
                        
                        if (debug) {
                            console.log('Requested donation IDs:', Array.from(requestedDonationIds));
                        }
                        
                        // Filter out donations that have been requested
                        allAvailableDonations = allAvailableDonations.filter(donation => 
                            !requestedDonationIds.has(donation.id)
                        );
                    }
                }
            } catch (error) {
                console.error('Error processing requests:', error);
            }
            
            if (debug) {
                console.log('Final donations to display after filtering requests:', allAvailableDonations);
            }
            
            // Apply any active filters to our donations
            applyFilters();
            
            if (debug) console.log(`Displayed ${allAvailableDonations.length} donation cards`);
        }
        
        function applyFilters() {
            const donationsContainer = document.getElementById('food-listings');
            const noFoodMessage = document.getElementById('no-food-message');
            const activeFiltersContainer = document.getElementById('active-filters');
            
            // Apply all filters to get filtered donations
            let filteredDonations = [...allAvailableDonations];
            
            // Filter by search text
            if (activeFilters.search) {
                filteredDonations = filteredDonations.filter(donation => 
                    (donation.foodName && donation.foodName.toLowerCase().includes(activeFilters.search)) ||
                    (donation.description && donation.description.toLowerCase().includes(activeFilters.search)) ||
                    (donation.location && donation.location.toLowerCase().includes(activeFilters.search))
                );
            }
            
            // Filter by food type
            if (activeFilters.foodType) {
                filteredDonations = filteredDonations.filter(donation => {
                    // Smart food type detection based on food name and description
                    const foodName = (donation.foodName || '').toLowerCase();
                    const description = (donation.description || '').toLowerCase();
                    const combinedText = `${foodName} ${description}`;
                    
                    switch (activeFilters.foodType) {
                        case 'fresh':
                            return /fresh|produce|vegetable|fruit|veg/i.test(combinedText);
                        case 'bakery':
                            return /bread|pastry|cake|bakery|baked|muffin|cookie/i.test(combinedText);
                        case 'cooked':
                            return /cooked|meal|prepared|dish|dinner|lunch|breakfast/i.test(combinedText);
                        case 'dairy':
                            return /milk|cheese|yogurt|dairy|cream|butter/i.test(combinedText);
                        case 'canned':
                            return /canned|packaged|box|container|preserved|can|jar/i.test(combinedText);
                        case 'beverages':
                            return /juice|drink|beverage|water|soda|beer|wine/i.test(combinedText);
                        case 'other':
                            // If it doesn't match any specific category, it's other
                            return !(/fresh|produce|vegetable|fruit|veg|bread|pastry|cake|bakery|baked|muffin|cookie|cooked|meal|prepared|dish|dinner|lunch|breakfast|milk|cheese|yogurt|dairy|cream|butter|canned|packaged|box|container|preserved|can|jar|juice|drink|beverage|water|soda|beer|wine/i.test(combinedText));
                        default:
                            return true;
                    }
                });
            }
            
            // Filter by expiry date
            if (activeFilters.expiry) {
                const now = new Date();
                
                filteredDonations = filteredDonations.filter(donation => {
                    const expiryDate = new Date(donation.expiryDate);
                    const hoursLeft = (expiryDate - now) / (1000 * 60 * 60);
                    
                    switch (activeFilters.expiry) {
                        case 'urgent':
                            return hoursLeft <= 3;
                        case 'today':
                            return hoursLeft <= 12;
                        case 'tomorrow':
                            return hoursLeft <= 24;
                        case 'week':
                            return hoursLeft <= 168; // 7 days * 24 hours
                        default:
                            return true;
                    }
                });
            }
            
            // Update active filters UI
            activeFiltersContainer.innerHTML = '';
            let hasFilters = false;
            
            if (activeFilters.search || activeFilters.foodType || activeFilters.expiry) {
                hasFilters = true;
                activeFiltersContainer.classList.remove('hidden');
                
                // Add filter for search term
                if (activeFilters.search) {
                    const filterTag = document.createElement('div');
                    filterTag.className = 'px-3 py-1 bg-[#fff8f3] text-[#f2800d] rounded-full text-sm flex items-center gap-1';
                    filterTag.innerHTML = `
                        <span>Search: "${activeFilters.search}"</span>
                        <button class="ml-1" onclick="clearFilter('search')">√ó</button>
                    `;
                    activeFiltersContainer.appendChild(filterTag);
                }
                
                // Add filter for food type
                if (activeFilters.foodType) {
                    const foodTypeElement = document.getElementById('food-type');
                    const foodTypeText = foodTypeElement.options[foodTypeElement.selectedIndex].text;
                    
                    const filterTag = document.createElement('div');
                    filterTag.className = 'px-3 py-1 bg-[#fff8f3] text-[#f2800d] rounded-full text-sm flex items-center gap-1';
                    filterTag.innerHTML = `
                        <span>Type: ${foodTypeText}</span>
                        <button class="ml-1" onclick="clearFilter('foodType')">√ó</button>
                    `;
                    activeFiltersContainer.appendChild(filterTag);
                }
                
                // Add filter for expiry
                if (activeFilters.expiry) {
                    const expiryElement = document.getElementById('expiry-filter');
                    const expiryText = expiryElement.options[expiryElement.selectedIndex].text;
                    
                    const filterTag = document.createElement('div');
                    filterTag.className = 'px-3 py-1 bg-[#fff8f3] text-[#f2800d] rounded-full text-sm flex items-center gap-1';
                    filterTag.innerHTML = `
                        <span>Expiry: ${expiryText}</span>
                        <button class="ml-1" onclick="clearFilter('expiry')">√ó</button>
                    `;
                    activeFiltersContainer.appendChild(filterTag);
                }
                
                // Add clear all button
                const clearAllButton = document.createElement('button');
                clearAllButton.className = 'px-3 py-1 bg-[#fcfaf8] text-[#9c7349] rounded-full text-sm hover:bg-[#e8dbce]';
                clearAllButton.textContent = 'Clear All Filters';
                clearAllButton.onclick = clearAllFilters;
                activeFiltersContainer.appendChild(clearAllButton);
            } else {
                activeFiltersContainer.classList.add('hidden');
            }
            
            // Display message if no donations available after filtering
            if (filteredDonations.length === 0) {
                if (noFoodMessage) {
                    noFoodMessage.classList.remove('hidden');
                    
                    // Change message if we have filters active
                    if (hasFilters) {
                        const messageTitleEl = noFoodMessage.querySelector('h3');
                        const messageTextEl = noFoodMessage.querySelector('p');
                        
                        if (messageTitleEl) {
                            messageTitleEl.textContent = 'No Matching Items';
                        }
                        
                        if (messageTextEl) {
                            messageTextEl.textContent = 'Try adjusting your filters to see more food donations.';
                        }
                    } else {
                        const messageTitleEl = noFoodMessage.querySelector('h3');
                        const messageTextEl = noFoodMessage.querySelector('p');
                        
                        if (messageTitleEl) {
                            messageTitleEl.textContent = 'No Food Available';
                        }
                        
                        if (messageTextEl) {
                            messageTextEl.textContent = 'There are no food donations available right now. Please check back later.';
                        }
                    }
                }
                
                // Clear container
                donationsContainer.innerHTML = '';
                return;
            }
            
            // Hide no food message if donations exist
            if (noFoodMessage) {
                noFoodMessage.classList.add('hidden');
            }
            
            // Clear existing food cards
            donationsContainer.innerHTML = '';
            
            // Create and append food cards
            filteredDonations.forEach(donation => {
                const card = createFoodCard(donation);
                donationsContainer.appendChild(card);
            });
        }
        
        function clearFilter(filterType) {
            // Reset the specific filter
            activeFilters[filterType] = '';
            
            // Also reset the corresponding form element
            if (filterType === 'search') {
                const searchInput = document.getElementById('search-input');
                if (searchInput) searchInput.value = '';
            } else if (filterType === 'foodType') {
                const foodTypeSelect = document.getElementById('food-type');
                if (foodTypeSelect) foodTypeSelect.value = '';
            } else if (filterType === 'expiry') {
                const expirySelect = document.getElementById('expiry-filter');
                if (expirySelect) expirySelect.value = '';
            }
            
            // Apply the updated filters
            applyFilters();
        }
        
        function clearAllFilters() {
            // Reset all filters
            activeFilters.search = '';
            activeFilters.foodType = '';
            activeFilters.expiry = '';
            
            // Reset all form elements
            const searchInput = document.getElementById('search-input');
            if (searchInput) searchInput.value = '';
            
            const foodTypeSelect = document.getElementById('food-type');
            if (foodTypeSelect) foodTypeSelect.value = '';
            
            const expirySelect = document.getElementById('expiry-filter');
            if (expirySelect) expirySelect.value = '';
            
            // Apply the updated filters
            applyFilters();
        }
        
        function debugDonations() {
            console.log('============ DEBUG DONATIONS ============');
            console.log('Checking all localStorage content:');
            
            for (let i = 0; i < localStorage.length; i++) {
                const key = localStorage.key(i);
                try {
                    const value = localStorage.getItem(key);
                    console.log(`${key}: ${value}`);
                } catch (e) {
                    console.error(`Error reading ${key}:`, e);
                }
            }
            
            console.log('========================================');
        }
        
        // Debug function to create a test donation directly in localStorage
        function createTestDonation() {
            const testDonationKey = 'allFoodDonations';
            const now = new Date();
            const tomorrow = new Date(now);
            tomorrow.setDate(tomorrow.getDate() + 1);
            
            // Create different food types for testing
            const foodTypes = [
                {
                    foodName: 'Fresh Vegetables Assortment',
                    quantity: '2 kg mixed vegetables',
                    description: 'Carrots, potatoes, tomatoes, and leafy greens from my garden'
                },
                {
                    foodName: 'Homemade Bread',
                    quantity: '3 loaves',
                    description: 'Freshly baked whole wheat bread'
                },
                {
                    foodName: 'Cooked Pasta Meal',
                    quantity: 'Family size portion',
                    description: 'Spaghetti with tomato sauce prepared today'
                },
                {
                    foodName: 'Milk and Yogurt',
                    quantity: '1 gallon milk, 5 yogurt cups',
                    description: 'Dairy products with 3 days left before expiry'
                },
                {
                    foodName: 'Canned Soup Collection',
                    quantity: '8 cans',
                    description: 'Various canned soups and beans'
                },
                {
                    foodName: 'Fruit Juice Bottles',
                    quantity: '4 bottles',
                    description: 'Apple and orange juice, unopened'
                }
            ];
            
            // Select a random food type
            const randomFood = foodTypes[Math.floor(Math.random() * foodTypes.length)];
            
            // Random expiry between 2 hours and 1 week
            const expiryHours = Math.floor(Math.random() * 168) + 2; // Between 2 hours and 7 days
            const expiryDate = new Date(now);
            expiryDate.setHours(expiryDate.getHours() + expiryHours);
            
            const testDonation = {
                id: 'donation_' + Date.now(),
                foodName: randomFood.foodName,
                quantity: randomFood.quantity,
                description: randomFood.description,
                expiryDate: expiryDate.toISOString(),
                location: 'Test Location',
                userId: 'test-donor-123',
                userName: 'Test Donor',
                status: 'pending',
                timestamp: now.toISOString()
            };
            
            // Get existing test donations or create new array
            let donations = JSON.parse(localStorage.getItem(testDonationKey) || '[]');
            donations.push(testDonation);
            
            // Save to localStorage
            localStorage.setItem(testDonationKey, JSON.stringify(donations));
            console.log('Created test donation:', testDonation);
            console.log('Saved to storage key:', testDonationKey);
            
            // Refresh the display
            loadAvailableDonations(true);
        }
        
        function createFoodCard(donation) {
            // Calculate time remaining until expiry
            const expiryDate = new Date(donation.expiryDate);
            const now = new Date();
            const hoursLeft = Math.round((expiryDate - now) / (1000 * 60 * 60));
            
            // Create a food card element
            const card = document.createElement('div');
            card.className = 'bg-white p-6 rounded-xl border border-[#e8dbce] hover:border-[#f2800d] transition-colors';
            card.setAttribute('data-donation-id', donation.id);
            
            // Determine urgency status based on hours left
            let statusClass = 'bg-green-100 text-green-800';
            let statusText = 'Available';
            
            if (hoursLeft <= 3) {
                statusClass = 'bg-red-100 text-red-800';
                statusText = 'Urgent';
            } else if (hoursLeft <= 12) {
                statusClass = 'bg-yellow-100 text-yellow-800';
                statusText = 'Limited';
            }
            
            // Format the time remaining text
            let timeText = '';
            if (hoursLeft < 1) {
                timeText = 'Less than 1 hour left';
            } else if (hoursLeft === 1) {
                timeText = '1 hour left';
            } else if (hoursLeft < 24) {
                timeText = `${hoursLeft} hours left`;
            } else {
                const daysLeft = Math.floor(hoursLeft / 24);
                timeText = `${daysLeft} day${daysLeft > 1 ? 's' : ''} left`;
            }
            
            // Get the food type category (for displaying as tag)
            const foodTypeTag = getFoodTypeTag(donation);
            
            // Check if this is a test donation (from test-donor-123)
            const isTestDonation = donation.userId === 'test-donor-123';
            
            // Create the card content
            card.innerHTML = `
                <div class="flex justify-between items-start mb-4">
                    <div>
                        <h3 class="font-bold text-[#1c140d] text-xl">${donation.foodName}</h3>
                        <p class="text-[#9c7349]">${donation.userName || 'Anonymous Donor'}</p>
                    </div>
                    <div class="flex items-center">
                        ${isTestDonation ? `
                            <button onclick="deleteDonation('${donation.id}')" class="mr-2 text-gray-400 hover:text-red-500 transition-colors" title="Delete test donation">
                                <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5" viewBox="0 0 20 20" fill="currentColor">
                                    <path fill-rule="evenodd" d="M4.293 4.293a1 1 0 011.414 0L10 8.586l4.293-4.293a1 1 0 111.414 1.414L11.414 10l4.293 4.293a1 1 0 01-1.414 1.414L10 11.414l-4.293 4.293a1 1 0 01-1.414-1.414L8.586 10 4.293 5.707a1 1 0 010-1.414z" clip-rule="evenodd" />
                                </svg>
                            </button>
                        ` : ''}
                        <span class="px-2 py-1 rounded-full text-sm ${statusClass}">${statusText}</span>
                    </div>
                </div>
                <div class="flex gap-2 mb-3">
                    ${foodTypeTag ? `<span class="px-2 py-1 rounded-full text-xs bg-[#fcfaf8] text-[#9c7349]">${foodTypeTag}</span>` : ''}
                </div>
                <p class="text-[#9c7349] mb-4">${donation.quantity}</p>
                ${donation.description ? `<p class="text-[#666] mb-4 text-sm">${donation.description}</p>` : ''}
                <div class="flex items-center gap-2 mb-4">
                    <span class="text-[#f2800d]">‚è∞ ${timeText}</span>
                    <span class="text-[#9c7349]">‚Ä¢ ${donation.location}</span>
                </div>
                <button onclick="requestFood('${donation.id}')" class="w-full px-4 py-3 bg-[#f2800d] text-white rounded-full font-bold hover:bg-[#e67600] transition-colors block text-center">
                    Request Food
                </button>
            `;
            
            return card;
        }
        
        function requestFood(donationId) {
            // Get the donation details from the available donations
            const donation = allAvailableDonations.find(d => d.id === donationId);
            
            if (!donation) {
                console.error("Donation not found:", donationId);
                return;
            }
            
            // Confirm with the user
            if (!confirm(`Are you sure you want to request ${donation.foodName} from ${donation.userName || 'Anonymous Donor'}?`)) {
                return;
            }
            
            // Create a request object
            const userId = '<%= user._id %>';
            const userName = '<%= user.name %>';
            const request = {
                id: 'request_' + Date.now(),
                foodId: donation.foodName + '_' + donationId,
                donorId: donation.userId,
                donorName: donation.userName || 'Anonymous Donor',
                recipientId: userId,
                recipientName: userName,
                status: 'pending',
                quantity: donation.quantity,
                location: donation.location,
                pickupTime: 'To be arranged',
                message: `I would like to request this ${donation.foodName} as soon as possible.`,
                timestamp: new Date().toISOString()
            };
            
            // Save the request to the user's requests
            saveRequestToLocalStorage(request);
            
            // Update the donation status to 'requested'
            updateDonationStatus(donationId, 'requested');
            
            // Remove the card from the UI
            const card = document.querySelector(`[data-donation-id="${donationId}"]`);
            if (card) {
                card.remove();
            }
            
            // Check if we need to show the empty state
            if (document.getElementById('food-listings').children.length === 0) {
                document.getElementById('no-food-message').classList.remove('hidden');
            }
            
            // Redirect to the my-requests page
            window.location.href = '/recipient/my-requests?submitted=true';
        }
        
        function saveRequestToLocalStorage(request) {
            // Save to user's requests
            const userStorageKey = `userRequests_${request.recipientId}`;
            let userRequests = JSON.parse(localStorage.getItem(userStorageKey) || '[]');
            userRequests.push(request);
            localStorage.setItem(userStorageKey, JSON.stringify(userRequests));
            
            // Save to global requests pool
            const allRequestsKey = 'allFoodRequests';
            let allRequests = JSON.parse(localStorage.getItem(allRequestsKey) || '[]');
            allRequests.push(request);
            localStorage.setItem(allRequestsKey, JSON.stringify(allRequests));
            
            console.log('Saved new request:', request);
        }
        
        function updateDonationStatus(donationId, newStatus) {
            // Update in universal donations
            const universalDonationKey = 'allFoodDonations';
            let donations = JSON.parse(localStorage.getItem(universalDonationKey) || '[]');
            
            const donationIndex = donations.findIndex(d => d.id === donationId);
            if (donationIndex !== -1) {
                donations[donationIndex].status = newStatus;
                localStorage.setItem(universalDonationKey, JSON.stringify(donations));
                console.log(`Updated donation ${donationId} status to ${newStatus}`);
            }
            
            // Also check in older user-specific storage
            const keys = Object.keys(localStorage);
            const donationKeys = keys.filter(key => key.startsWith('userDonations_'));
            
            donationKeys.forEach(key => {
                let userDonations = JSON.parse(localStorage.getItem(key) || '[]');
                const index = userDonations.findIndex(d => d.id === donationId);
                
                if (index !== -1) {
                    userDonations[index].status = newStatus;
                    localStorage.setItem(key, JSON.stringify(userDonations));
                    console.log(`Updated donation ${donationId} status in ${key}`);
                }
            });
        }
        
        function deleteDonation(donationId) {
            if (confirm('Are you sure you want to delete this test donation?')) {
                const universalDonationKey = 'allFoodDonations';
                
                try {
                    // Get current donations
                    const donations = JSON.parse(localStorage.getItem(universalDonationKey) || '[]');
                    
                    // Filter out the donation to delete
                    const updatedDonations = donations.filter(donation => donation.id !== donationId);
                    
                    // Save back to localStorage
                    localStorage.setItem(universalDonationKey, JSON.stringify(updatedDonations));
                    
                    // Remove the card from the UI without needing a full refresh
                    const card = document.querySelector(`[data-donation-id="${donationId}"]`);
                    if (card) {
                        card.remove();
                    }
                    
                    // Check if we need to show the empty state
                    const donationsContainer = document.getElementById('food-listings');
                    if (donationsContainer.children.length === 0) {
                        const noFoodMessage = document.getElementById('no-food-message');
                        if (noFoodMessage) {
                            noFoodMessage.classList.remove('hidden');
                        }
                    }
                    
                    console.log(`Deleted donation with ID: ${donationId}`);
                } catch (error) {
                    console.error('Error deleting donation:', error);
                }
            }
        }
        
        function getFoodTypeTag(donation) {
            // Get food type based on name and description
            const foodName = (donation.foodName || '').toLowerCase();
            const description = (donation.description || '').toLowerCase();
            const combinedText = `${foodName} ${description}`;
            
            if (/fresh|produce|vegetable|fruit|veg/i.test(combinedText)) {
                return 'Fresh Produce';
            } else if (/bread|pastry|cake|bakery|baked|muffin|cookie/i.test(combinedText)) {
                return 'Bakery';
            } else if (/cooked|meal|prepared|dish|dinner|lunch|breakfast/i.test(combinedText)) {
                return 'Cooked Meal';
            } else if (/milk|cheese|yogurt|dairy|cream|butter/i.test(combinedText)) {
                return 'Dairy';
            } else if (/canned|packaged|box|container|preserved|can|jar/i.test(combinedText)) {
                return 'Canned/Packaged';
            } else if (/juice|drink|beverage|water|soda|beer|wine/i.test(combinedText)) {
                return 'Beverage';
            }
            
            return null;
        }

        (function(){if(!window.chatbase||window.chatbase("getState")!=="initialized"){window.chatbase=(...arguments)=>{if(!window.chatbase.q){window.chatbase.q=[]}window.chatbase.q.push(arguments)};window.chatbase=new Proxy(window.chatbase,{get(target,prop){if(prop==="q"){return target.q}return(...args)=>target(prop,...args)}})}const onLoad=function(){const script=document.createElement("script");script.src="https://www.chatbase.co/embed.min.js";script.id="XdbxzB02-VrgllGOSsnGa";script.domain="www.chatbase.co";document.body.appendChild(script)};if(document.readyState==="complete"){onLoad()}else{window.addEventListener("load",onLoad)}})();
    </script>
</body>
</html> 