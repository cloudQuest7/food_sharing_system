<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>ShareBites - Browse Food</title>
    <script src="https://cdn.tailwindcss.com"></script>
    <link rel="preconnect" href="https://fonts.gstatic.com/" crossorigin="" />
    <link rel="stylesheet" href="https://fonts.googleapis.com/css2?display=swap&family=Epilogue:wght@400;500;700;900&family=Noto+Sans:wght@400;500;700;900" />
    <style>
        body {
            font-family: Epilogue, "Noto Sans", sans-serif;
            background-color: #fcfaf8;
        }
    </style>
</head>
<body>
    <div class="flex">
        <!-- Sidebar -->
        <div class="w-64 h-screen bg-white border-r border-[#e8dbce] fixed flex flex-col justify-between">
            <div class="p-6">
                <div class="flex items-center gap-4 text-[#1c140d] mb-8">
                    <div class="size-4">
                        <svg viewBox="0 0 48 48" fill="none" xmlns="http://www.w3.org/2000/svg">
                            <path d="M8.57829 8.57829C5.52816 11.6284 3.451 15.5145 2.60947 19.7452C1.76794 23.9758 2.19984 28.361 3.85056 32.3462C5.50128 36.3314 8.29667 39.7376 11.8832 42.134C15.4698 44.5305 19.6865 45.8096 24 45.8096C28.3135 45.8096 32.5302 44.5305 36.1168 42.134C39.7033 39.7375 42.4987 36.3314 44.1494 32.3462C45.8002 28.361 46.2321 23.9758 45.3905 19.7452C44.549 15.5145 42.4718 11.6284 39.4217 8.57829L24 24L8.57829 8.57829Z" fill="currentColor"></path>
                        </svg>
                    </div>
                    <h2 class="text-[#1c140d] text-lg font-bold leading-tight tracking-[-0.015em]">ShareBites</h2>
                </div>
                <nav class="space-y-4">
                    <a href="/recipient/dashboard" class="block px-4 py-2 text-[#1c140d] hover:bg-[#fcfaf8] rounded-lg font-medium">Dashboard</a>
                    <a href="/recipient/browse" class="block px-4 py-2 text-[#1c140d] hover:bg-[#fcfaf8] rounded-lg font-medium">Browse Food</a>
                    <a href="/recipient/my-requests" class="block px-4 py-2 bg-[#f2800d] text-white rounded-lg font-medium">My Requests</a>
                    <a href="/recipient/saved" class="block px-4 py-2 text-[#1c140d] hover:bg-[#fcfaf8] rounded-lg font-medium">Saved Items</a>
                    <a href="/recipient/profile" class="block px-4 py-2 text-[#1c140d] hover:bg-[#fcfaf8] rounded-lg font-medium">Profile</a>
                </nav>
            </div>
            
            <!-- Profile Section -->
            <div class="p-6 border-t border-[#e8dbce]">
                <div class="flex items-center gap-3">
                    <img src="https://ui-avatars.com/api/?name=John&background=f2800d&color=fff" 
                         alt="John's profile" 
                         class="w-10 h-10 rounded-full border-2 border-[#f2800d]"/>
                    <div>
                        <p class="text-[#1c140d] font-bold">John</p>
                        <p class="text-[#9c7349] text-sm">Food Recipient</p>
                    </div>
                </div>
            </div>
        </div>

        <!-- Main Content -->
        <div class="ml-64 flex-1 p-8">
            <!-- Header Section -->
            <div class="mb-8">
                <h1 class="text-[#1c140d] text-4xl font-black leading-tight tracking-[-0.033em] mb-4">Browse Available Food</h1>
                <p class="text-[#9c7349] text-lg">Find and request food items from your local community</p>
            </div>

            <!-- Filters Section -->
            <div class="bg-white p-6 rounded-xl border border-[#e8dbce] mb-8">
                <div class="grid grid-cols-1 md:grid-cols-4 gap-4">
                    <!-- Search Input -->
                    <div class="col-span-2">
                        <input type="text" 
                               placeholder="Search food items..." 
                               class="w-full px-4 py-3 rounded-xl border border-[#e8dbce] focus:border-[#f2800d] outline-none"/>
                    </div>
                    
                    <!-- Category Filter -->
                    <div>
                        <select class="w-full px-4 py-3 rounded-xl border border-[#e8dbce] focus:border-[#f2800d] outline-none">
                            <option value="">All Categories</option>
                            <option value="vegetables">Vegetables</option>
                            <option value="fruits">Fruits</option>
                            <option value="bakery">Bakery</option>
                            <option value="dairy">Dairy</option>
                            <option value="canned">Canned Goods</option>
                        </select>
                    </div>
                    
                    <!-- Distance Filter -->
                    <div>
                        <select class="w-full px-4 py-3 rounded-xl border border-[#e8dbce] focus:border-[#f2800d] outline-none">
                            <option value="">Any Distance</option>
                            <option value="1">Within 1 km</option>
                            <option value="3">Within 3 km</option>
                            <option value="5">Within 5 km</option>
                        </select>
                    </div>
                </div>
            </div>

            <!-- Food Grid -->
            <div id="food-listings" class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
                <!-- Food cards will be loaded dynamically here -->
                
                <!-- Loading placeholder -->
                <div class="animate-pulse bg-white p-6 rounded-xl border border-[#e8dbce]">
                    <div class="h-6 bg-gray-200 rounded w-3/4 mb-2"></div>
                    <div class="h-4 bg-gray-200 rounded w-1/2 mb-4"></div>
                    <div class="h-4 bg-gray-200 rounded w-full mb-4"></div>
                    <div class="h-4 bg-gray-200 rounded w-3/4 mb-6"></div>
                    <div class="h-10 bg-gray-200 rounded w-full"></div>
                </div>
                <div class="animate-pulse bg-white p-6 rounded-xl border border-[#e8dbce]">
                    <div class="h-6 bg-gray-200 rounded w-3/4 mb-2"></div>
                    <div class="h-4 bg-gray-200 rounded w-1/2 mb-4"></div>
                    <div class="h-4 bg-gray-200 rounded w-full mb-4"></div>
                    <div class="h-4 bg-gray-200 rounded w-3/4 mb-6"></div>
                    <div class="h-10 bg-gray-200 rounded w-full"></div>
                </div>
                <div class="animate-pulse bg-white p-6 rounded-xl border border-[#e8dbce]">
                    <div class="h-6 bg-gray-200 rounded w-3/4 mb-2"></div>
                    <div class="h-4 bg-gray-200 rounded w-1/2 mb-4"></div>
                    <div class="h-4 bg-gray-200 rounded w-full mb-4"></div>
                    <div class="h-4 bg-gray-200 rounded w-3/4 mb-6"></div>
                    <div class="h-10 bg-gray-200 rounded w-full"></div>
                </div>
            </div>
            
            <!-- Empty state message -->
            <div id="no-food-message" class="hidden bg-white p-8 rounded-xl border border-[#e8dbce] text-center">
                <div class="w-20 h-20 bg-[#fcfaf8] rounded-full flex items-center justify-center mx-auto mb-4">
                    <span class="text-3xl">üçΩÔ∏è</span>
                </div>
                <h3 class="font-bold text-[#1c140d] text-xl mb-2">No Food Available</h3>
                <p class="text-[#9c7349] mb-6 max-w-md mx-auto">There are no food donations available right now. Please check back later or adjust your search filters.</p>
            </div>

            <!-- Pagination -->
            <div class="mt-8 flex justify-center">
                <div class="flex gap-2">
                    <button class="px-4 py-2 border border-[#e8dbce] rounded-lg text-[#1c140d] hover:border-[#f2800d]">Previous</button>
                    <button class="px-4 py-2 bg-[#f2800d] text-white rounded-lg">1</button>
                    <button class="px-4 py-2 border border-[#e8dbce] rounded-lg text-[#1c140d] hover:border-[#f2800d]">2</button>
                    <button class="px-4 py-2 border border-[#e8dbce] rounded-lg text-[#1c140d] hover:border-[#f2800d]">3</button>
                    <button class="px-4 py-2 border border-[#e8dbce] rounded-lg text-[#1c140d] hover:border-[#f2800d]">Next</button>
                </div>
            </div>
        </div>
    </div>

    <script>
        // Get all donor food posts from localStorage to display them
        document.addEventListener('DOMContentLoaded', function() {
            loadAvailableDonations();
            
            // Add event listeners for menu toggle if on mobile
            const menuToggle = document.getElementById('menuToggle');
            if (menuToggle) {
                menuToggle.addEventListener('click', toggleMenu);
            }
        });
        
        function toggleMenu() {
            const sidebar = document.getElementById('sidebar');
            sidebar.classList.toggle('-translate-x-full');
        }
        
        function loadAvailableDonations() {
            const donationsContainer = document.getElementById('food-listings');
            const noFoodMessage = document.getElementById('no-food-message');
            
            // Get all localStorage keys to find donation storage
            const keys = Object.keys(localStorage);
            const donationKeys = keys.filter(key => key.startsWith('userDonations_'));
            
            let allDonations = [];
            
            // Extract donations from all donors
            donationKeys.forEach(key => {
                try {
                    const donations = JSON.parse(localStorage.getItem(key) || '[]');
                    // Only include pending donations that aren't expired
                    const validDonations = donations.filter(donation => {
                        const isValid = donation.status === 'pending';
                        const expiryDate = new Date(donation.expiryDate);
                        const isNotExpired = expiryDate >= new Date();
                        return isValid && isNotExpired;
                    });
                    allDonations = [...allDonations, ...validDonations];
                } catch (error) {
                    console.error('Error parsing donations from storage:', error);
                }
            });
            
            // Display message if no donations available
            if (allDonations.length === 0) {
                if (noFoodMessage) {
                    noFoodMessage.classList.remove('hidden');
                }
                return;
            }
            
            // Hide no food message if donations exist
            if (noFoodMessage) {
                noFoodMessage.classList.add('hidden');
            }
            
            // Clear existing food cards
            donationsContainer.innerHTML = '';
            
            // Create and append food cards
            allDonations.forEach(donation => {
                const card = createFoodCard(donation);
                donationsContainer.appendChild(card);
            });
        }
        
        function createFoodCard(donation) {
            // Calculate time remaining until expiry
            const expiryDate = new Date(donation.expiryDate);
            const now = new Date();
            const hoursLeft = Math.round((expiryDate - now) / (1000 * 60 * 60));
            
            // Create a food card element
            const card = document.createElement('div');
            card.className = 'bg-white p-6 rounded-xl border border-[#e8dbce] hover:border-[#f2800d] transition-colors';
            
            // Determine urgency status based on hours left
            let statusClass = 'bg-green-100 text-green-800';
            let statusText = 'Available';
            
            if (hoursLeft <= 3) {
                statusClass = 'bg-red-100 text-red-800';
                statusText = 'Urgent';
            } else if (hoursLeft <= 12) {
                statusClass = 'bg-yellow-100 text-yellow-800';
                statusText = 'Limited';
            }
            
            // Format the time remaining text
            let timeText = '';
            if (hoursLeft < 1) {
                timeText = 'Less than 1 hour left';
            } else if (hoursLeft === 1) {
                timeText = '1 hour left';
            } else if (hoursLeft < 24) {
                timeText = `${hoursLeft} hours left`;
            } else {
                const daysLeft = Math.floor(hoursLeft / 24);
                timeText = `${daysLeft} day${daysLeft > 1 ? 's' : ''} left`;
            }
            
            // Create the card content
            card.innerHTML = `
                <div class="flex justify-between items-start mb-4">
                    <div>
                        <h3 class="font-bold text-[#1c140d] text-xl">${donation.foodName}</h3>
                        <p class="text-[#9c7349]">${donation.userName || 'Anonymous Donor'}</p>
                    </div>
                    <span class="px-2 py-1 rounded-full text-sm ${statusClass}">${statusText}</span>
                </div>
                <p class="text-[#9c7349] mb-4">${donation.quantity}</p>
                <div class="flex items-center gap-2 mb-4">
                    <span class="text-[#f2800d]">‚è∞ ${timeText}</span>
                    <span class="text-[#9c7349]">‚Ä¢ ${donation.location}</span>
                </div>
                <a href="/recipient/request/${donation.id}" class="w-full px-4 py-3 bg-[#f2800d] text-white rounded-full font-bold hover:bg-[#e67600] transition-colors block text-center">
                    Request Food
                </a>
            `;
            
            return card;
        }
    </script>
</body>
</html> 