<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>ShareBites - View Requests</title>
    <script src="https://cdn.tailwindcss.com"></script>
    <link rel="preconnect" href="https://fonts.gstatic.com/" crossorigin="" />
    <link
      rel="stylesheet"
      href="https://fonts.googleapis.com/css2?display=swap&family=Epilogue:wght@400;500;700;900&family=Noto+Sans:wght@400;500;700;900"
    />
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.3/css/all.min.css">
    <style>
        body {
            font-family: Epilogue, "Noto Sans", sans-serif;
            background-color: #fcfaf8;
        }
    </style>
    <script>
        let activeTab = 'all';
        const requestCards = new Map(); // Store request data
        let userStorageKey = '';

        function initializeUserStorage() {
            // Create a unique key based on user ID
            const userId = '<%= user._id %>' || 'default-user';
            userStorageKey = `userDonations_${userId}`;
            
            // Initialize storage if it doesn't exist
            if (!localStorage.getItem(userStorageKey)) {
                localStorage.setItem(userStorageKey, JSON.stringify([]));
            }
            
            console.log(`Request page: User storage initialized with key: ${userStorageKey}`);
        }

        function initializeRequests() {
            // Initialize user storage
            initializeUserStorage();
            
            // Load requests from allFoodRequests
            loadRecipientRequests();
            
            // Set up tab switching
            document.querySelectorAll('.tab-button').forEach(button => {
                button.addEventListener('click', () => {
                    switchTab(button.dataset.tab);
                });
            });
        }

        function loadRecipientRequests() {
            // Get all food requests from localStorage
            const allRequests = JSON.parse(localStorage.getItem('allFoodRequests') || '[]');
            
            // Get donor's posted food items
            const donorDonations = JSON.parse(localStorage.getItem(userStorageKey) || '[]');
            
            // Filter requests that are for this donor's posted food
            const donorRequests = allRequests.filter(request => {
                // Check if this request is for one of the donor's donations
                return donorDonations.some(donation => donation.id === request.foodId);
            });
            
            // Count pending requests
            const pendingCount = donorRequests.filter(request => request.status === 'pending').length;
            updatePendingCount(pendingCount);
            
            // Hide loading placeholder
            const loadingPlaceholder = document.getElementById('loading-placeholder');
            if (loadingPlaceholder) {
                loadingPlaceholder.style.display = 'none';
            }
            
            if (donorRequests.length === 0) {
                // No requests found, show empty state
                const requestContainer = document.getElementById('food-requests-container');
                requestContainer.innerHTML = `
                    <div class="bg-white p-8 rounded-xl border border-[#e8dbce] text-center">
                        <div class="w-20 h-20 bg-[#fcfaf8] rounded-full flex items-center justify-center mx-auto mb-4">
                            <span class="text-3xl">ðŸ“‹</span>
                        </div>
                        <h3 class="font-bold text-[#1c140d] text-xl mb-2">No Food Requests Yet</h3>
                        <p class="text-[#9c7349] mb-6 max-w-md mx-auto">You don't have any food requests from recipients yet. When someone requests your posted food, they will appear here.</p>
                    </div>
                `;
                return;
            }
            
            // Create request cards
            const requestContainer = document.getElementById('food-requests-container');
            requestContainer.innerHTML = '';
            
            donorRequests.forEach(request => {
                // Get the food details
                const donation = donorDonations.find(donation => donation.id === request.foodId);
                
                if (!donation) return; // Skip if donation not found
                
                // Create card
                const card = createRequestCard(request, donation);
                requestContainer.appendChild(card);
                
                // Store for filtering
                requestCards.set(card.id, { 
                    element: card,
                    status: request.status
                });
            });
        }

        function createRequestCard(request, foodItem) {
            const card = document.createElement('div');
            card.className = "request-card bg-[#fcfaf8] p-6 rounded-xl border border-[#e8dbce] flex items-center justify-between transition-all duration-300";
            card.id = `request-${request.id}`;
            
            // Format date
            const requestDate = new Date(request.timestamp);
            const formattedDate = requestDate.toLocaleDateString(undefined, { 
                weekday: 'short',
                month: 'short', 
                day: 'numeric',
                hour: '2-digit',
                minute: '2-digit'
            });
            
            // Determine status class
            let statusClass = 'bg-[#fff8f3] text-[#f2800d]';
            if (request.status === 'accepted') {
                statusClass = 'bg-green-100 text-green-600';
            } else if (request.status === 'rejected') {
                statusClass = 'bg-red-100 text-red-600';
            }
            
            card.innerHTML = `
                <div class="flex items-center space-x-4">
                    <img src="https://ui-avatars.com/api/?name=${request.recipientName}&background=f2800d&color=fff" alt="Profile image of ${request.recipientName}" class="w-12 h-12 rounded-full border-2 border-[#f2800d]">
                    <div>
                        <h2 class="text-[#1c140d] text-lg font-bold leading-tight">${request.recipientName} <span class="text-xs bg-[#f4ede7] text-[#9c7349] rounded-full px-3 py-1">Recipient</span></h2>
                        <p class="text-[#9c7349]"><i class="fas fa-box"></i> ${foodItem.foodName} (${foodItem.quantity})</p>
                        <p class="text-[#9c7349]"><i class="fas fa-map-marker-alt"></i> ${foodItem.location}</p>
                        <p class="text-[#9c7349]"><i class="fas fa-clock"></i> Pickup: ${request.pickupTime}</p>
                    </div>
                </div>
                <div class="flex items-center space-x-4">
                    <p class="text-[#9c7349]"><i class="fas fa-clock"></i> ${formattedDate}</p>
                    <span id="status-${request.id}" class="text-xs ${statusClass} rounded-full px-3 py-1">${request.status.charAt(0).toUpperCase() + request.status.slice(1)}</span>
                    <button id="reject-${request.id}" onclick="updateStatus('${request.id}', 'rejected')" 
                            class="px-4 py-2 border border-[#e8dbce] text-[#1c140d] rounded-full font-bold hover:border-[#f2800d] transition-colors"
                            ${request.status !== 'pending' ? 'disabled' : ''}>
                        Reject
                    </button>
                    <button id="accept-${request.id}" onclick="updateStatus('${request.id}', 'accepted')" 
                            class="px-4 py-2 bg-[#f2800d] text-[#1c140d] rounded-full font-bold hover:bg-[#e67600] transition-colors"
                            ${request.status !== 'pending' ? 'disabled' : ''}>
                        Accept
                    </button>
                </div>
            `;
            
            return card;
        }

        // Update the updatePendingCount function
        function updatePendingCount(count) {
            // Update all pending count displays including sidebar
            const pendingCounters = document.querySelectorAll('.pending-count');
            const sidebarCounter = document.querySelector('.sidebar-pending-count');
            
            pendingCounters.forEach(counter => {
                counter.textContent = count;
            });
            
            if (sidebarCounter) {
                sidebarCounter.textContent = count;
                // Hide counter if no pending requests
                sidebarCounter.style.display = count > 0 ? 'flex' : 'none';
            }
        }

        function switchTab(tab) {
            // Update active tab styling
            document.querySelectorAll('.tab-button').forEach(btn => {
                if (btn.dataset.tab === tab) {
                    btn.className = 'tab-button flex-grow p-3 bg-[#f2800d] text-white rounded-xl font-bold transform scale-105 shadow-lg transition-all duration-300';
                } else {
                    btn.className = 'tab-button flex-grow p-3 bg-[#fcfaf8] text-[#9c7349] rounded-xl font-bold hover:bg-[#fff8f3] hover:text-[#f2800d] transition-all duration-300';
                }
            });

            // Update active tab indicator
            const indicator = document.querySelector('.tab-indicator');
            const activeTab = document.querySelector(`[data-tab="${tab}"]`);
            if (indicator && activeTab) {
                indicator.style.width = `${activeTab.offsetWidth}px`;
                indicator.style.transform = `translateX(${activeTab.offsetLeft}px)`;
            }

            // Filter and animate request cards with improved animation
            requestCards.forEach((data, id) => {
                const card = data.element;
                
                // Get the status from the card
                const requestId = id.replace('request-', '');
                const statusElement = document.getElementById(`status-${requestId}`);
                const status = statusElement ? statusElement.textContent.toLowerCase() : '';
                
                if (tab === 'all' || status === tab.toLowerCase()) {
                    card.style.display = 'flex';
                    setTimeout(() => {
                        card.style.transform = 'translateX(0)';
                        card.style.opacity = '1';
                    }, 50);
                } else {
                    card.style.transform = 'translateX(-20px)';
                    card.style.opacity = '0';
                    setTimeout(() => {
                        card.style.display = 'none';
                    }, 300);
                }
            });

            activeTab = tab;
        }

        function updateStatus(requestId, status) {
            // Get all food requests
            const allRequests = JSON.parse(localStorage.getItem('allFoodRequests') || '[]');
            
            // Find the request
            const requestIndex = allRequests.findIndex(req => req.id === requestId);
            
            if (requestIndex !== -1) {
                // Update status in allRequests
                allRequests[requestIndex].status = status;
                localStorage.setItem('allFoodRequests', JSON.stringify(allRequests));
                
                // Also update in recipient's storage
                const recipientId = allRequests[requestIndex].recipientId;
                const recipientKey = `userRequests_${recipientId}`;
                
                try {
                    const recipientRequests = JSON.parse(localStorage.getItem(recipientKey) || '[]');
                    const recipientRequestIndex = recipientRequests.findIndex(req => req.id === requestId);
                    
                    if (recipientRequestIndex !== -1) {
                        recipientRequests[recipientRequestIndex].status = status;
                        localStorage.setItem(recipientKey, JSON.stringify(recipientRequests));
                    }
                } catch (error) {
                    console.error('Error updating recipient request:', error);
                }
                
                // Update UI
                const statusElement = document.getElementById(`status-${requestId}`);
                const acceptButton = document.getElementById(`accept-${requestId}`);
                const rejectButton = document.getElementById(`reject-${requestId}`);
                const card = document.getElementById(`request-${requestId}`);

                if (status === 'accepted') {
                    statusElement.textContent = 'Accepted';
                    statusElement.className = 'text-xs bg-green-100 text-green-600 rounded-full px-3 py-1';
                    acceptButton.disabled = true;
                    rejectButton.disabled = false;
                    
                    // Show success message
                    showMessage(`Request accepted! The recipient will be notified.`);
                } else if (status === 'rejected') {
                    statusElement.textContent = 'Rejected';
                    statusElement.className = 'text-xs bg-red-100 text-red-600 rounded-full px-3 py-1';
                    acceptButton.disabled = false;
                    rejectButton.disabled = true;
                }

                // Update request card data
                requestCards.set(`request-${requestId}`, { 
                    element: card, 
                    status: status 
                });

                // Update pending count
                const pendingCount = document.querySelectorAll('[id^="status-"][class*="bg-[#fff8f3]"]').length;
                updatePendingCount(pendingCount);

                // Refresh current tab view
                switchTab(activeTab);
            }
        }

        // Function to save accepted request to donations
        function saveAcceptedRequestToDonations(donationData) {
            // Get existing donations or initialize empty array
            let donations = JSON.parse(localStorage.getItem(userStorageKey) || '[]');
            
            // Add user info to donation
            donationData.userId = '<%= user._id %>';
            donationData.userName = '<%= user.name %>';
            
            // Add new donation
            donations.push(donationData);
            
            // Save back to localStorage
            localStorage.setItem(userStorageKey, JSON.stringify(donations));
        }

        // Function to show message
        function showMessage(message, type = 'success') {
            const messageEl = document.createElement('div');
            messageEl.className = `fixed bottom-4 right-4 px-4 py-2 rounded-xl font-bold ${
                type === 'success' ? 'bg-green-100 text-green-600' : 'bg-red-100 text-red-600'
            } z-50`;
            messageEl.textContent = message;
            document.body.appendChild(messageEl);
            
            setTimeout(() => {
                messageEl.style.opacity = '0';
                messageEl.style.transition = 'opacity 0.3s';
                setTimeout(() => messageEl.remove(), 300);
            }, 3000);
        }

        // Initialize on page load
        document.addEventListener('DOMContentLoaded', initializeRequests);
    </script>
</head>
<body class="flex bg-[#fcfaf8]">
    <!-- Menu Toggle Button -->
    <button id="menuToggle" class="lg:hidden fixed top-4 left-4 z-50 p-2 bg-white rounded-xl border border-[#e8dbce] text-[#9c7349] hover:text-[#f2800d]">
        <i class="fas fa-bars"></i>
    </button>

    <!-- Sidebar -->
    <aside id="sidebar" class="w-64 h-screen bg-white border-r border-[#e8dbce] fixed left-0 top-0 flex flex-col transform -translate-x-full lg:translate-x-0 transition-transform duration-300 z-40">
        <!-- Logo and Navigation section -->
        <div class="flex-1">
            <div class="flex items-center gap-4 p-6 border-b border-[#e8dbce]">
                <div class="size-6">
                    <svg viewBox="0 0 48 48" fill="none" xmlns="http://www.w3.org/2000/svg">
                        <path d="M8.57829 8.57829C5.52816 11.6284 3.451 15.5145 2.60947 19.7452C1.76794 23.9758 2.19984 28.361 3.85056 32.3462C5.50128 36.3314 8.29667 39.7376 11.8832 42.134C15.4698 44.5305 19.6865 45.8096 24 45.8096C28.3135 45.8096 32.5302 44.5305 36.1168 42.134C39.7033 39.7375 42.4987 36.3314 44.1494 32.3462C45.8002 28.361 46.2321 23.9758 45.3905 19.7452C44.549 15.5145 42.4718 11.6284 39.4217 8.57829L24 24L8.57829 8.57829Z" fill="#f2800d"></path>
                    </svg>
                </div>
                <h2 class="text-[#1c140d] text-xl font-bold">ShareBites</h2>
            </div>
            
            <nav class="p-4">
                <ul class="space-y-2">
                    <li>
                        <a href="/donor/dashboard" class="flex items-center p-3 text-[#9c7349] hover:bg-[#fcfaf8] rounded-xl transition-colors">
                            <i class="fas fa-home w-6"></i>
                            <span class="ml-3">Home</span>
                        </a>
                    </li>
                    <li>
                        <a href="/donor/post-food" class="flex items-center p-3 text-[#9c7349] hover:bg-[#fcfaf8] rounded-xl transition-colors">
                            <i class="fas fa-plus-circle w-6"></i>
                            <span class="ml-3">Post Food</span>
                        </a>
                    </li>
                    <li>
                        <a href="/donor/donation" class="flex items-center p-3 text-[#9c7349] hover:bg-[#fcfaf8] rounded-xl transition-colors">
                            <i class="fas fa-box-open w-6"></i>
                            <span class="ml-3">My Donations</span>
                        </a>
                    </li>
                    <li>
                        <a href="/donor/requests" class="flex items-center p-3 bg-[#fff8f3] text-[#f2800d] rounded-xl">
                            <i class="fas fa-bell w-6"></i>
                            <span class="ml-3">View Requests</span>
                            <span class="sidebar-pending-count ml-auto bg-[#f2800d] text-white text-xs font-bold w-5 h-5 rounded-full flex items-center justify-center">3</span>
                        </a>
                    </li>
                    <li>
                        <a href="/donor/profile" class="flex items-center p-3 text-[#9c7349] hover:bg-[#fcfaf8] rounded-xl transition-colors">
                            <i class="fas fa-user w-6"></i>
                            <span class="ml-3">Profile</span>
                        </a>
                    </li>
                </ul>
            </nav>
        </div>

        <!-- Profile Section at Bottom -->
        <div class="p-4 border-t border-[#e8dbce]">
            <div class="flex items-center space-x-3 p-3 text-[#9c7349] hover:bg-[#fcfaf8] rounded-xl transition-colors cursor-pointer">
                <img src="https://ui-avatars.com/api/?name=<%= user.name %>&background=f2800d&color=fff" alt="Profile" class="w-8 h-8 rounded-full border-2 border-[#f2800d]">
                <div>
                    <p class="text-sm font-bold text-[#1c140d]"><%= user.name %></p>
                    <p class="text-xs text-[#9c7349]">Food Donor</p>
                </div>
                <i class="fas fa-chevron-right ml-auto text-xs"></i>
            </div>
        </div>
    </aside>

    <!-- Main Content -->
    <main class="w-full lg:ml-64 p-4 lg:p-8 transition-all duration-300">
        <div class="mb-8">
            <h1 class="text-2xl lg:text-3xl font-semibold text-[#1c140d] tracking-wide leading-tight mb-1">
                Food Requests
            </h1>
            <p class="text-sm lg:text-base text-[#9c7349] font-normal">
                Hello <%= user.name %>, manage incoming requests for your donated food items
            </p>
        </div>
        
        <div class="bg-white p-6 rounded-xl border border-[#e8dbce]">
            <div class="flex items-center mb-6">
                <input type="text" 
                       placeholder="Search by recipient, food item, or location..." 
                       class="flex-grow p-3 border border-[#e8dbce] rounded-xl bg-[#fcfaf8] focus:border-[#f2800d] outline-none">
                <button class="ml-4 p-3 border border-[#e8dbce] rounded-xl text-[#9c7349] hover:border-[#f2800d] transition-colors">
                    <i class="fas fa-clock"></i> Newest First
                </button>
            </div>

            <div class="relative flex space-x-4 mb-6">
                <div class="tab-indicator absolute bottom-0 h-1 bg-[#f2800d] transition-all duration-300"></div>
                <button onclick="switchTab('all')" data-tab="all" 
                        class="tab-button flex-grow p-3 bg-[#f2800d] text-white rounded-xl font-bold transform scale-105 shadow-lg transition-all duration-300">
                    All
                </button>
                <button onclick="switchTab('pending')" data-tab="pending" 
                        class="tab-button flex-grow p-3 bg-[#fcfaf8] text-[#9c7349] rounded-xl font-bold hover:bg-[#fff8f3] hover:text-[#f2800d] transition-all duration-300">
                    Pending
                </button>
                <button onclick="switchTab('accepted')" data-tab="accepted" 
                        class="tab-button flex-grow p-3 bg-[#fcfaf8] text-[#9c7349] rounded-xl font-bold hover:bg-[#fff8f3] hover:text-[#f2800d] transition-all duration-300">
                    Accepted
                </button>
                <button onclick="switchTab('rejected')" data-tab="rejected" 
                        class="tab-button flex-grow p-3 bg-[#fcfaf8] text-[#9c7349] rounded-xl font-bold hover:bg-[#fff8f3] hover:text-[#f2800d] transition-all duration-300">
                    Rejected
                </button>
            </div>

            <div class="flex justify-end mb-6">
                <button class="flex items-center text-[#f2800d] font-bold">
                    <span class="pending-count bg-[#f2800d] text-white text-xs font-bold w-5 h-5 rounded-full flex items-center justify-center mr-2">0</span>
                    <span>Pending</span>
                </button>
            </div>

            <div class="space-y-4" id="food-requests-container">
                <!-- Request cards will be loaded dynamically -->
                
                <!-- Loading state -->
                <div id="loading-placeholder" class="animate-pulse space-y-4">
                    <div class="bg-[#fcfaf8] p-6 rounded-xl border border-[#e8dbce]">
                        <div class="flex justify-between">
                            <div class="flex items-center gap-4">
                                <div class="w-12 h-12 bg-gray-200 rounded-full"></div>
                                <div class="space-y-2">
                                    <div class="h-4 bg-gray-200 rounded w-32"></div>
                                    <div class="h-3 bg-gray-200 rounded w-48"></div>
                                    <div class="h-3 bg-gray-200 rounded w-40"></div>
                                </div>
                            </div>
                            <div class="space-y-2">
                                <div class="h-3 bg-gray-200 rounded w-24"></div>
                                <div class="h-8 bg-gray-200 rounded w-20"></div>
                            </div>
                        </div>
                    </div>
                    <div class="bg-[#fcfaf8] p-6 rounded-xl border border-[#e8dbce]">
                        <div class="flex justify-between">
                            <div class="flex items-center gap-4">
                                <div class="w-12 h-12 bg-gray-200 rounded-full"></div>
                                <div class="space-y-2">
                                    <div class="h-4 bg-gray-200 rounded w-36"></div>
                                    <div class="h-3 bg-gray-200 rounded w-44"></div>
                                    <div class="h-3 bg-gray-200 rounded w-52"></div>
                                </div>
                            </div>
                            <div class="space-y-2">
                                <div class="h-3 bg-gray-200 rounded w-20"></div>
                                <div class="h-8 bg-gray-200 rounded w-24"></div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </main>
    
    <script>
        // Toggle menu functionality for mobile
        document.getElementById('menuToggle').addEventListener('click', function() {
            const sidebar = document.getElementById('sidebar');
            sidebar.classList.toggle('-translate-x-full');
        });

        (function(){if(!window.chatbase||window.chatbase("getState")!=="initialized"){window.chatbase=(...arguments)=>{if(!window.chatbase.q){window.chatbase.q=[]}window.chatbase.q.push(arguments)};window.chatbase=new Proxy(window.chatbase,{get(target,prop){if(prop==="q"){return target.q}return(...args)=>target(prop,...args)}})}const onLoad=function(){const script=document.createElement("script");script.src="https://www.chatbase.co/embed.min.js";script.id="XdbxzB02-VrgllGOSsnGa";script.domain="www.chatbase.co";document.body.appendChild(script)};if(document.readyState==="complete"){onLoad()}else{window.addEventListener("load",onLoad)}})();
    </script>
</body>
</html>